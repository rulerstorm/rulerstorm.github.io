<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rock&#39;s personal notebook</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Rocklu.me/"/>
  <updated>2016-03-29T09:31:14.000Z</updated>
  <id>http://Rocklu.me/</id>
  
  <author>
    <name>Rock Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CPP异常处理</title>
    <link href="http://Rocklu.me/2016/03/28/CPP%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://Rocklu.me/2016/03/28/CPP异常处理/</id>
    <published>2016-03-27T16:00:00.000Z</published>
    <updated>2016-03-29T09:31:14.000Z</updated>
    
    <content type="html">&lt;p&gt;对于可以预计的问题，相对于原始的&lt;code&gt;if判断&lt;/code&gt;与&lt;code&gt;返回值&lt;/code&gt;方法，异常处理机制的主要目的，是「把问题的&lt;code&gt;检测&lt;/code&gt;与&lt;code&gt;处理&lt;/code&gt;分离」，相互独立以后，可以降低耦合度，且相互不需要知道内部细节。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;栈展开-stack-unwinding&quot;&gt;&lt;a href=&quot;#栈展开-stack-unwinding&quot; class=&quot;headerlink&quot; title=&quot;栈展开(stack unwinding)&quot;&gt;&lt;/a&gt;栈展开(stack unwinding)&lt;/h4&gt;&lt;p&gt;每个函数/代码块（function/block）被调用时，会把局部变量压栈。&lt;br&gt;然而当异常被throw后，当前栈就直接释放，搜寻是否有匹配的catch。&lt;br&gt;如果当前的try块的catch不能匹配，则再&lt;code&gt;退栈&lt;/code&gt;，返回上一层函数，搜索匹配的catch。直到有catch接住这个异常为止。&lt;br&gt;这个过程就是栈展开。&lt;br&gt;我们需要注意的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;退栈的情况和&lt;code&gt;函数调用&lt;/code&gt;完毕后的退栈情况一样，不要传出局部变量的引用或指针&lt;/li&gt;
&lt;li&gt;抛出异常时，代码的行为类似于&lt;code&gt;return&lt;/code&gt;，后面的代码都不执行。于是才用RAII管理资源是必须的。&lt;/li&gt;
&lt;li&gt;[不重要]退栈的过程中清理局部变量，会调用析构函数。所以，析构函数一般不抛异常。如果你要抛，自己处理掉。否则直接terminate。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;异常对象&quot;&gt;&lt;a href=&quot;#异常对象&quot; class=&quot;headerlink&quot; title=&quot;异常对象&quot;&gt;&lt;/a&gt;异常对象&lt;/h4&gt;&lt;p&gt;异常对象可以是标准库里面的exception类型，也可以是任意的类型。因为退栈，局部变量都会被销毁，这个对象要能让很多层以外的调用者知道是什么东西出了问题。&lt;br&gt;STL里面的类型大致分两种：runtime_error和logic_error&lt;br&gt;runtime主要是溢出、越界。指运行时错误。&lt;br&gt;logic主要是参数错误、范围错误。指代码的错误。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;「注意」&lt;/code&gt;为了满足退栈后别人还能访问到这个对象的特性，异常对象被存放在编译器管理的内存空间中。在catch语句结束后销毁。&lt;/p&gt;
&lt;h4 id=&quot;异常的捕获&quot;&gt;&lt;a href=&quot;#异常的捕获&quot; class=&quot;headerlink&quot; title=&quot;异常的捕获&quot;&gt;&lt;/a&gt;异常的捕获&lt;/h4&gt;&lt;p&gt;可以说，catch是一种特殊的函数。根据被抛出的异常对象的类型，编译器裁决是否符合catch函数对参数的要求。catch语句与普通的&lt;code&gt;函数调用&lt;/code&gt;的主要区别如下：&lt;br&gt;函数调用裁决时，允许最大限度的&lt;code&gt;类型转化&lt;/code&gt;。而catch则非常严格，只允许&lt;strong&gt;子类到父类&lt;/strong&gt;、&lt;strong&gt;变量到常量&lt;/strong&gt;、&lt;strong&gt;数组函数名转指针&lt;/strong&gt;这三种类型转化。&lt;br&gt;另外：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;异常对象的形参，和函数形参相似，也是使用「拷贝初始化」的方式初始化的。所以，这个异常类如果是自己定义的，必须小心「拷贝构造」函数。&lt;/li&gt;
&lt;li&gt;和函数调用一样，&lt;code&gt;引用类型&lt;/code&gt;的参数会直接操作全局的异常对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;额外的主题&quot;&gt;&lt;a href=&quot;#额外的主题&quot; class=&quot;headerlink&quot; title=&quot;额外的主题&quot;&gt;&lt;/a&gt;额外的主题&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;rethrowing&lt;/strong&gt;&lt;br&gt;对于不能完全处理的异常，可以处理一部分，然后再向上抛。语法就是只写一个&lt;code&gt;throw;&lt;/code&gt;&lt;br&gt;&lt;strong&gt;捕获所有异常&lt;/strong&gt;&lt;br&gt;catch函数类型要求严格，想要一个函数接住所有，这样：&lt;code&gt;catch(...)&lt;/code&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于可以预计的问题，相对于原始的&lt;code&gt;if判断&lt;/code&gt;与&lt;code&gt;返回值&lt;/code&gt;方法，异常处理机制的主要目的，是「把问题的&lt;code&gt;检测&lt;/code&gt;与&lt;code&gt;处理&lt;/code&gt;分离」，相互独立以后，可以降低耦合度，且相互不需要知道内部细节。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客迁移</title>
    <link href="http://Rocklu.me/2016/03/21/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>http://Rocklu.me/2016/03/21/博客迁移/</id>
    <published>2016-03-20T16:00:00.000Z</published>
    <updated>2016-03-30T14:23:33.000Z</updated>
    
    <content type="html">&lt;p&gt;之前的一年里，虽然陆陆续续从各方面开始感觉jekyll不好使，也因为凑合用，就一直懒得换。&lt;br&gt;直到最近github开始不兼容我原来那个模板的语法…随便补救一下之后发现新旧不兼容，今天更是无法编译我最新的文章了…&lt;/p&gt;
&lt;p&gt;无奈。换吧，试试hexo~&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;想不到坑真是非常的多。。。&lt;/p&gt;
&lt;h4 id=&quot;首先，之前语法高亮的标记-highlight-cpp-要全部替换&quot;&gt;&lt;a href=&quot;#首先，之前语法高亮的标记-highlight-cpp-要全部替换&quot; class=&quot;headerlink&quot; title=&quot;首先，之前语法高亮的标记\{\% highlight cpp \%\}要全部替换&quot;&gt;&lt;/a&gt;首先，之前语法高亮的标记&lt;code&gt;\{\% highlight cpp \%\}&lt;/code&gt;要全部替换&lt;/h4&gt;&lt;p&gt;正好复习了下正则表达式，命令如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls | xargs sed -i.backup.md &lt;span class=&quot;string&quot;&gt;&#39;s/&amp;#123;%.*highlight *\(.*\) *%&amp;#125;/```\1/g&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;其次，hexo语法奇葩，行尾不能有空格&quot;&gt;&lt;a href=&quot;#其次，hexo语法奇葩，行尾不能有空格&quot; class=&quot;headerlink&quot; title=&quot;其次，hexo语法奇葩，行尾不能有空格&quot;&gt;&lt;/a&gt;其次，hexo语法奇葩，行尾不能有空格&lt;/h4&gt;&lt;p&gt;于是：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls | xargs sed -i.backup.md &lt;span class=&quot;string&quot;&gt;&#39;s/ *$//g&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;再来，是图片的地址&quot;&gt;&lt;a href=&quot;#再来，是图片的地址&quot; class=&quot;headerlink&quot; title=&quot;再来，是图片的地址&quot;&gt;&lt;/a&gt;再来，是图片的地址&lt;/h4&gt;&lt;p&gt;之前放在github文件夹里面，现在迁移到七牛，需要改改前缀。&lt;br&gt;于是打开VIM：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:%s/PATERN/TARGET/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是http地址里面的斜杠&lt;code&gt;/&lt;/code&gt;在pattern里面需要用转义&lt;code&gt;\/&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;最后，你需要熟悉hexo的生态&quot;&gt;&lt;a href=&quot;#最后，你需要熟悉hexo的生态&quot; class=&quot;headerlink&quot; title=&quot;最后，你需要熟悉hexo的生态&quot;&gt;&lt;/a&gt;最后，你需要熟悉hexo的生态&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;简单命令&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g == generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s == serve&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d == deploy 部署至github需要插件和配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;g -&lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; == generate + deploy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clean == flush buffer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;br&gt;主要看官方文档，这里写思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装模板，git上clone到模板文件夹，然后到配置文件里面设置&lt;/li&gt;
&lt;li&gt;根据模板要求安装各种插件，关键还有deploy到github的插件&lt;/li&gt;
&lt;li&gt;然后在主配置文件里面设置好github账户，OK！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;另外&lt;/strong&gt;&lt;br&gt;CNAME文件放在&lt;code&gt;source&lt;/code&gt;目录下，只有这个文件夹下的内容会被push出去。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前的一年里，虽然陆陆续续从各方面开始感觉jekyll不好使，也因为凑合用，就一直懒得换。&lt;br&gt;直到最近github开始不兼容我原来那个模板的语法…随便补救一下之后发现新旧不兼容，今天更是无法编译我最新的文章了…&lt;/p&gt;
&lt;p&gt;无奈。换吧，试试hexo~&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++零碎笔记</title>
    <link href="http://Rocklu.me/2016/03/20/C++%E9%9B%B6%E7%A2%8E%E7%AC%94%E8%AE%B0/"/>
    <id>http://Rocklu.me/2016/03/20/C++零碎笔记/</id>
    <published>2016-03-19T16:00:00.000Z</published>
    <updated>2016-03-31T03:03:16.000Z</updated>
    
    <content type="html">&lt;p&gt;补充零碎的cpp笔记。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;堆和栈&quot;&gt;&lt;a href=&quot;#堆和栈&quot; class=&quot;headerlink&quot; title=&quot;堆和栈&quot;&gt;&lt;/a&gt;堆和栈&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;局部变量的内存分配在栈上，出了大括号自动清理。&lt;/li&gt;
&lt;li&gt;new出来的变量分配在堆上，需要手动释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;问：既然栈内存可以自动释放，为啥还要堆呢？&lt;br&gt;因为每个函数的栈大小，是在&lt;code&gt;编译期&lt;/code&gt;就确定下来的，代码写好就钉死了。（这也是为什么申明数组时不可以使用变量）这个函数执行结束后，把这块固定大小的栈空间释放掉。所以，对于需要在&lt;code&gt;运行时&lt;/code&gt;确定大小的空间，就要有一个灵活的堆来管理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;构造函数的调用顺序&quot;&gt;&lt;a href=&quot;#构造函数的调用顺序&quot; class=&quot;headerlink&quot; title=&quot;构造函数的调用顺序&quot;&gt;&lt;/a&gt;构造函数的调用顺序&lt;/h4&gt;&lt;p&gt;由于「子类包含父类」，或者说，父类是子类的前面一部分。于是，构造时，从里面开始，先调用父类，再调用子类。&lt;br&gt;同理，对于一个类里面「持有」另一个类的情况，也是先构造里面的类。&lt;br&gt;同理，对于析构函数，先析构外面的子类，再析构里面。&lt;/p&gt;
&lt;h4 id=&quot;操作符重载若干问题&quot;&gt;&lt;a href=&quot;#操作符重载若干问题&quot; class=&quot;headerlink&quot; title=&quot;操作符重载若干问题&quot;&gt;&lt;/a&gt;操作符重载若干问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;操作符重载可以写在类里，也可以写在全局。但是优先调用全局的。&lt;/li&gt;
&lt;li&gt;对于「指针」操作符的重载（即&lt;code&gt;-&amp;gt;&lt;/code&gt;），语法规定就是返回一个raw pointer类型（&lt;code&gt;*&lt;/code&gt;，或者说是地址）。不要追问&lt;code&gt;为什么这个-&amp;gt;不是唤起重载函数用掉了吗？为什么又能继续作用到后面的东西呢？&lt;/code&gt;，因为这是语法规定。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;i++&lt;/code&gt;的重载，就是有一个「虚置」的int放在那里，用来区分&lt;code&gt;++i&lt;/code&gt;的重载函数。语法规定，没理由。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;再谈explicit关键字&quot;&gt;&lt;a href=&quot;#再谈explicit关键字&quot; class=&quot;headerlink&quot; title=&quot;再谈explicit关键字&quot;&gt;&lt;/a&gt;再谈explicit关键字&lt;/h4&gt;&lt;p&gt;要知道，编译器的主要工作，是尽可能帮你通过编译。（真的嘛？…）&lt;br&gt;作为&lt;code&gt;弱类型&lt;/code&gt;语言，C++编译器会寻找各种「隐式类型转化」来帮助代码通过编译。一个明显的例子就是当你把一个int放到申明参数为double的函数里面去时，代码不会报错。&lt;br&gt;当你写了一个class，他的构造函数只有&lt;code&gt;一个参数&lt;/code&gt;，或者其他的参数都有默认值时，编译器会根据代码需要，自动帮你把符合构造函数的变量，给他套上这个构造函数。正是因为这样的特性，编译器有时会意外得帮你做出你不需要的转化。而「explicit」的意思就是：明确的、显式的。意思就是只有我明确写了我要调用这个构造函数时，你才调用。否则别帮我自作多情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那，为啥只有&lt;code&gt;一个参数&lt;/code&gt;的构造函数才有这种问题呢？&lt;br&gt;答，很显然，你俩参数，出了显式调用，还能咋自动？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;泛型编程若干&quot;&gt;&lt;a href=&quot;#泛型编程若干&quot; class=&quot;headerlink&quot; title=&quot;泛型编程若干&quot;&gt;&lt;/a&gt;泛型编程若干&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;概述：&lt;/strong&gt;&lt;br&gt;模板有三种：&lt;code&gt;函数模板&lt;/code&gt;、&lt;code&gt;类模板&lt;/code&gt;、&lt;code&gt;成员模板&lt;/code&gt;。&lt;br&gt;其中，仅有类模板需要在绑定时显示绑定模板参数，其余两个可以编译时自动推断。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问：有了类模板不就行了，还要成员模板干啥呢？&lt;br&gt;答：首先要明确：成员模板–指的是成员函数是一个「模板函数」。&lt;br&gt;也就是说，即使在模板类绑定了参数以后，仍然允许其成员函数接受泛型参数。（即构造函数参数类型未定）。&lt;br&gt;如果只用类模板，在class的参数绑定以后，函数参数的类型也绑定了，不能改了。&lt;br&gt;_&lt;br&gt;用途：多用在STL的&lt;code&gt;copy构造函数&lt;/code&gt;。比如，希望可以支持&lt;code&gt;用子类copy初始化父类&lt;/code&gt;。虽然把参数定义为父类指针也可以做到这件事情，但是要知道，父类本身就是一个类模板，类型未定，在写这个函数的时候是不能决定参数类型的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于「模板模板参数」&lt;/strong&gt;&lt;br&gt;意思是，参数本身是一个&lt;code&gt;未绑定的&lt;/code&gt;「模板类」。已经绑定的模板类作为参数不属于模板模板参数。&lt;br&gt;暂时并不能理解这样做的好处，可能是强制根据其他参数自动绑定。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;虚表与虚指针&quot;&gt;&lt;a href=&quot;#虚表与虚指针&quot; class=&quot;headerlink&quot; title=&quot;虚表与虚指针&quot;&gt;&lt;/a&gt;虚表与虚指针&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;补充零碎的cpp笔记。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>内存对齐浅析</title>
    <link href="http://Rocklu.me/2016/02/14/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E6%B5%85%E6%9E%90/"/>
    <id>http://Rocklu.me/2016/02/14/内存对齐浅析/</id>
    <published>2016-02-13T16:00:00.000Z</published>
    <updated>2016-03-29T09:31:14.000Z</updated>
    
    <content type="html">&lt;p&gt;这个概念经常听到，好像也不难。但是稍微想一下，就发现并不是一两句话能够带过的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;啥是「字节对齐」？&quot;&gt;&lt;a href=&quot;#啥是「字节对齐」？&quot; class=&quot;headerlink&quot; title=&quot;啥是「字节对齐」？&quot;&gt;&lt;/a&gt;啥是「字节对齐」？&lt;/h4&gt;&lt;p&gt;变量放在内存中，以&lt;code&gt;起始位置&lt;/code&gt;作为地址。内存对齐，就是把内存分出一个个的&lt;code&gt;“槽”&lt;/code&gt;，看上去和分页差不多，称为对齐。&lt;/p&gt;
&lt;h4 id=&quot;为啥要对齐？&quot;&gt;&lt;a href=&quot;#为啥要对齐？&quot; class=&quot;headerlink&quot; title=&quot;为啥要对齐？&quot;&gt;&lt;/a&gt;为啥要对齐？&lt;/h4&gt;&lt;p&gt;现代机器虽然是「按字节编址」，理论上可以访问任意一个字节。但是，&lt;code&gt;somehow&lt;/code&gt;32位机器通过地址总线访问内存时，总是从4Btye的&lt;code&gt;整数倍&lt;/code&gt;位置开始。我们知道对于&lt;code&gt;字长&lt;/code&gt;也是32位（4Byte）的计算机来说，一次读取的数据量就是4Byte。于是乎，如果一个Int型（4B）的数据，没有放在能被4B整除的位置，那么就需要访问两次（一前一后），才能拼出这个Int数据。所以，是&lt;code&gt;效率问题&lt;/code&gt;。&lt;br&gt;「另外」在MIPS机器上不对齐会报错。&lt;br&gt;「水深」字节对齐不但牵涉硬件，还有关大小端、强制转化等隐蔽错误！&lt;br&gt;「关于那个somehow」网上看了很多资料，都没有很好从硬件上解释CPU为何会先从4B的整数位置开始，只能somehow了。。。&lt;/p&gt;
&lt;h4 id=&quot;对齐规则&quot;&gt;&lt;a href=&quot;#对齐规则&quot; class=&quot;headerlink&quot; title=&quot;对齐规则&quot;&gt;&lt;/a&gt;对齐规则&lt;/h4&gt;&lt;p&gt;非常类似于「内存分页」。规则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量长度&lt;code&gt;大于等于&lt;/code&gt;4B的，一律另开一个槽（页），从4B的整数地址开始。&lt;/li&gt;
&lt;li&gt;变量长度&lt;code&gt;小于&lt;/code&gt;4B的，先试下能否直接在前面变量的槽里塞下，塞的下就塞进去。塞不下就另开一个槽。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; A&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;   &lt;span class=&quot;comment&quot;&gt;//sizeof为8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; B&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;   &lt;span class=&quot;comment&quot;&gt;//sizeof为12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;写在最后：对齐方式可以改吗？&quot;&gt;&lt;a href=&quot;#写在最后：对齐方式可以改吗？&quot; class=&quot;headerlink&quot; title=&quot;写在最后：对齐方式可以改吗？&quot;&gt;&lt;/a&gt;写在最后：对齐方式可以改吗？&lt;/h4&gt;&lt;p&gt;当然可以的，改大了浪费空间，改小了影响效率，一般就是默认就行了。&lt;br&gt;默认值一般是CPU的字长。&lt;br&gt;修改方式：&lt;br&gt;&lt;code&gt;#pragma pack(4) //按4字节对齐&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这个概念经常听到，好像也不难。但是稍微想一下，就发现并不是一两句话能够带过的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OS和OSX小技巧</title>
    <link href="http://Rocklu.me/2016/02/02/iOS%E5%92%8COSX%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://Rocklu.me/2016/02/02/iOS和OSX小技巧/</id>
    <published>2016-02-01T16:00:00.000Z</published>
    <updated>2016-04-22T16:00:55.000Z</updated>
    
    <content type="html">&lt;p&gt;花了一段时间积累的，不容易找到，也不容易发现的tricks。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;如何群发短信和邮件&quot;&gt;&lt;a href=&quot;#如何群发短信和邮件&quot; class=&quot;headerlink&quot; title=&quot;如何群发短信和邮件&quot;&gt;&lt;/a&gt;如何群发短信和邮件&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;用mac给通讯录分组（iOS不支持）&lt;/li&gt;
&lt;li&gt;在短信和mail「编辑界面」的「地址栏」&lt;code&gt;直接输入&lt;/code&gt;分组的名字（不要点右边那个+号，那样会变成一个一个人选择）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;typing时，用3D-touch移动光标&quot;&gt;&lt;a href=&quot;#typing时，用3D-touch移动光标&quot; class=&quot;headerlink&quot; title=&quot;typing时，用3D-touch移动光标&quot;&gt;&lt;/a&gt;typing时，用3D-touch移动光标&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;按下一个键&lt;/li&gt;
&lt;li&gt;停顿0.5秒（必须）&lt;/li&gt;
&lt;li&gt;用力按下（peep的力量）&lt;/li&gt;
&lt;li&gt;此时键盘上的文字会消失，变成「触摸板模式」，移动手指可移动光标。&lt;/li&gt;
&lt;li&gt;怎么「选择文字」？在触摸板模式，让光标在一个单词上&lt;code&gt;停留1秒&lt;/code&gt;。此时开始「选择文字模式」，再移动光标就会选字了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;3D-touch的app切换&quot;&gt;&lt;a href=&quot;#3D-touch的app切换&quot; class=&quot;headerlink&quot; title=&quot;3D-touch的app切换&quot;&gt;&lt;/a&gt;3D-touch的app切换&lt;/h4&gt;&lt;p&gt;我们知道按压左侧屏幕会进入「任务切换」模式，此时如果不松手，而是&lt;code&gt;把当前app画面继续推到「最右边」推出屏幕&lt;/code&gt;，则会直接切换到前一个app，不用选择。&lt;/p&gt;
&lt;h4 id=&quot;双手操作MacBook触控板&quot;&gt;&lt;a href=&quot;#双手操作MacBook触控板&quot; class=&quot;headerlink&quot; title=&quot;双手操作MacBook触控板&quot;&gt;&lt;/a&gt;双手操作MacBook触控板&lt;/h4&gt;&lt;p&gt;当需要大量「拖动」操作时，无论是「三指拖移」还是forceTouch的用力按压都会显得力不从心。此时，可以用左手按住触控板不动，右手轻轻拖移，此时右手可以随意拖移，只要左手压在那里，鼠标就不会放开。&lt;br&gt;「注意」左手必须压在触控板的&lt;code&gt;边缘&lt;/code&gt;部位，否则无效。&lt;/p&gt;
&lt;h4 id=&quot;如何把照片快速弄成PDF&quot;&gt;&lt;a href=&quot;#如何把照片快速弄成PDF&quot; class=&quot;headerlink&quot; title=&quot;如何把照片快速弄成PDF&quot;&gt;&lt;/a&gt;如何把照片快速弄成PDF&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;同时选中多张图片&lt;/li&gt;
&lt;li&gt;用「预览」（preview）打开&lt;/li&gt;
&lt;li&gt;全选左侧所有的图片&lt;/li&gt;
&lt;li&gt;在「菜单」中，依次「File」-&amp;gt;「Print」-&amp;gt;左下角有个写着&lt;code&gt;PDF&lt;/code&gt;的下拉菜单 -&amp;gt;选择「save as PDF」&lt;br&gt;「注意」其他方式均会导致PDF里面只有一张图！（比如export as PDF）&lt;br&gt;「另外」对于需要批量旋转的照片，推荐用&lt;code&gt;Automator&lt;/code&gt;，简单。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;连拍&quot;&gt;&lt;a href=&quot;#连拍&quot; class=&quot;headerlink&quot; title=&quot;连拍&quot;&gt;&lt;/a&gt;连拍&lt;/h4&gt;&lt;p&gt;iOS相机的拍照键&lt;code&gt;长按&lt;/code&gt;即可以非常高的速度连拍。&lt;/p&gt;
&lt;h4 id=&quot;截图进阶&quot;&gt;&lt;a href=&quot;#截图进阶&quot; class=&quot;headerlink&quot; title=&quot;截图进阶&quot;&gt;&lt;/a&gt;截图进阶&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;command + shift + 4&lt;/code&gt; 按好后，再按一下&lt;code&gt;空格&lt;/code&gt;，可进入「截取窗口」模式，自带窗口阴影&lt;/li&gt;
&lt;li&gt;快捷键按的时候带上&lt;code&gt;control&lt;/code&gt;键，则会把截图直接存入「粘贴版」&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;iCloud备份一直失败&quot;&gt;&lt;a href=&quot;#iCloud备份一直失败&quot; class=&quot;headerlink&quot; title=&quot;iCloud备份一直失败&quot;&gt;&lt;/a&gt;iCloud备份一直失败&lt;/h4&gt;&lt;p&gt;请使用&lt;code&gt;另一台&lt;/code&gt;iOS设备进入「iCloud存储空间」管理，把faulty equipment的备份&lt;code&gt;删除&lt;/code&gt;。重新备份即可。&lt;/p&gt;
&lt;h4 id=&quot;离线单词发音&quot;&gt;&lt;a href=&quot;#离线单词发音&quot; class=&quot;headerlink&quot; title=&quot;离线单词发音&quot;&gt;&lt;/a&gt;离线单词发音&lt;/h4&gt;&lt;p&gt;在terminal中，命令&lt;code&gt;say&lt;/code&gt;可以直接念句子。如需支持中文，请在设置的「dictation and speech」栏目中下载语音包。&lt;/p&gt;
&lt;h4 id=&quot;Mac-OS-X-输入法技巧&quot;&gt;&lt;a href=&quot;#Mac-OS-X-输入法技巧&quot; class=&quot;headerlink&quot; title=&quot;Mac OS X 输入法技巧&quot;&gt;&lt;/a&gt;Mac OS X 输入法技巧&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Mac OSX输入单词补全&lt;/strong&gt;&lt;br&gt;输入英文单词时，按下&lt;code&gt;ESC&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;emoji输入&lt;/strong&gt;&lt;br&gt;&lt;code&gt;control ＋ command ＋ 空格&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特殊注音词&lt;/strong&gt;&lt;br&gt;用 ‘ 符号作为拼音之间的分隔符，例如：xi’an 西安；&lt;br&gt;「tab」 可以在 1234 声调中切换选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除错误的词库&lt;/strong&gt;&lt;br&gt;错误的个人候选词，高亮候选词后按 「shift+delete」键。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;emacs快捷键&quot;&gt;&lt;a href=&quot;#emacs快捷键&quot; class=&quot;headerlink&quot; title=&quot;emacs快捷键&quot;&gt;&lt;/a&gt;emacs快捷键&lt;/h4&gt;&lt;p&gt;OS X系统在大多数app中都支持emacs快捷键，包括鼠标双击、三击。&lt;br&gt;&lt;code&gt;control + f&lt;/code&gt; — forward&lt;br&gt;&lt;code&gt;control + b&lt;/code&gt; — backward&lt;br&gt;&lt;code&gt;control + p&lt;/code&gt; — previous line&lt;br&gt;&lt;code&gt;control + n&lt;/code&gt; — next line&lt;br&gt;&lt;code&gt;control + a&lt;/code&gt; — 移至行首/ command + 右&lt;br&gt;&lt;code&gt;control + e&lt;/code&gt; — 移至行尾/ command + 左&lt;br&gt;&lt;code&gt;移动时按option&lt;/code&gt; — 按照单词移动&lt;/p&gt;
&lt;p&gt;&lt;code&gt;control + d&lt;/code&gt; — delete（删右边）&lt;br&gt;&lt;code&gt;control + h&lt;/code&gt; — delete&lt;br&gt;&lt;code&gt;control + k&lt;/code&gt; — kill（删至行尾）&lt;/p&gt;
&lt;h4 id=&quot;我自己改的快捷键：&quot;&gt;&lt;a href=&quot;#我自己改的快捷键：&quot; class=&quot;headerlink&quot; title=&quot;我自己改的快捷键：&quot;&gt;&lt;/a&gt;我自己改的快捷键：&lt;/h4&gt;&lt;p&gt;&lt;code&gt;command + shift + x&lt;/code&gt;  —  在该文件夹打开terminal&lt;br&gt;&lt;code&gt;command + shift + a&lt;/code&gt;  —  在字典搜索该单词&lt;br&gt;&lt;code&gt;alt + 1&lt;/code&gt; — 呼出dropzone&lt;br&gt;&lt;code&gt;alt + 2&lt;/code&gt; — 呼出Moom&lt;br&gt;&lt;code&gt;alt + 3&lt;/code&gt; — 呼出iTranslate&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[系统功能]快捷键定义方法：系统偏好设置-&amp;gt;键盘-&amp;gt;快捷键-&amp;gt;服务&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;花了一段时间积累的，不容易找到，也不容易发现的tricks。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>雅思课笔记</title>
    <link href="http://Rocklu.me/2016/01/29/%E9%9B%85%E6%80%9D%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://Rocklu.me/2016/01/29/雅思课笔记/</id>
    <published>2016-01-28T19:35:00.000Z</published>
    <updated>2016-06-06T08:41:34.000Z</updated>
    
    <content type="html">&lt;p&gt;华尔街英语雅思课程笔记。&lt;/p&gt;
&lt;h4 id=&quot;大作文&quot;&gt;&lt;a href=&quot;#大作文&quot; class=&quot;headerlink&quot; title=&quot;大作文&quot;&gt;&lt;/a&gt;大作文&lt;/h4&gt;&lt;p&gt;议论文，40min，250words（少字低分）&lt;/p&gt;
&lt;h5 id=&quot;高分Tips&quot;&gt;&lt;a href=&quot;#高分Tips&quot; class=&quot;headerlink&quot; title=&quot;高分Tips&quot;&gt;&lt;/a&gt;高分Tips&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;词汇和语法多样化（最多重复两次）&lt;/li&gt;
&lt;li&gt;注意审题（别漏了&lt;code&gt;反面论证&lt;/code&gt;、自己的观点）&lt;/li&gt;
&lt;li&gt;注意用formal language。（名词化、被动、从句。）&lt;/li&gt;
&lt;li&gt;论点后面增加支持句子，比如例子、论述。&lt;/li&gt;
&lt;li&gt;多用逻辑连接词。重要！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrpbg.com1.z0.glb.clouddn.com/%E8%BF%9E%E6%8E%A5%E8%AF%8D.JPG&quot; style=&quot;margin-top: 10px&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;margin-top:-30px; text-align: center; font-size:15px; font-weight: 500&quot;&gt;连接词汇总&lt;/p&gt;

&lt;h5 id=&quot;推荐方法&quot;&gt;&lt;a href=&quot;#推荐方法&quot; class=&quot;headerlink&quot; title=&quot;推荐方法&quot;&gt;&lt;/a&gt;推荐方法&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;大框架：一段开头介绍，中间2-3段论证正反方面，最后一段总结观点。&lt;/li&gt;
&lt;li&gt;用2min写一个&lt;code&gt;提纲&lt;/code&gt;。头脑风暴，更具题目的倾向性分配正反两方面。（平衡局：1正/1反，正面局：2正/1反）&lt;/li&gt;
&lt;li&gt;第一段书写指导：过去的背景(in the past)、现在的情况(these days)、别人意见、自己观点。&lt;/li&gt;
&lt;li&gt;中间三段布局：正面局（两个优点各一段、一个缺点一段）平衡局（正面论述一段、反面论述一段）&lt;/li&gt;
&lt;li&gt;中间段书写指导：一句&lt;code&gt;定义&lt;/code&gt;观点，一句&lt;code&gt;解释&lt;/code&gt;观点，一句&lt;code&gt;例子&lt;/code&gt;，一句写写可能导致的&lt;code&gt;后果&lt;/code&gt;及&lt;code&gt;重要性&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;最后总结段书写指导：就是把前面几段的main idea换种方式重复下…&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;PEE法&quot;&gt;&lt;a href=&quot;#PEE法&quot; class=&quot;headerlink&quot; title=&quot;PEE法&quot;&gt;&lt;/a&gt;PEE法&lt;/h5&gt;&lt;p&gt;point-&amp;gt; explanation -&amp;gt; example&lt;/p&gt;
&lt;h5 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h5&gt;&lt;p&gt;星期和月份必须大写&lt;/p&gt;
&lt;p&gt;—&lt;/p&gt;
&lt;h4 id=&quot;口语&quot;&gt;&lt;a href=&quot;#口语&quot; class=&quot;headerlink&quot; title=&quot;口语&quot;&gt;&lt;/a&gt;口语&lt;/h4&gt;&lt;p&gt;口语测试总计20min。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;5个小问题，随便聊聊。&lt;/li&gt;
&lt;li&gt;2min单独叙述，有1min纸笔准备。&lt;/li&gt;
&lt;li&gt;3个深入问题，主要测试口语论证能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;评价维度&quot;&gt;&lt;a href=&quot;#评价维度&quot; class=&quot;headerlink&quot; title=&quot;评价维度&quot;&gt;&lt;/a&gt;评价维度&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Quantity - 说得越多越好，超时考官会打断你&lt;/li&gt;
&lt;li&gt;Grammar - 小的语法错误别介意，尝试用复杂结构&lt;/li&gt;
&lt;li&gt;Vocabulary - 多用副词，&lt;code&gt;视觉化&lt;/code&gt;描述，&lt;code&gt;故事化&lt;/code&gt;（used to…）&lt;/li&gt;
&lt;li&gt;Organisation - 逻辑结构（basically、both、firstly）&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;高分Tips-1&quot;&gt;&lt;a href=&quot;#高分Tips-1&quot; class=&quot;headerlink&quot; title=&quot;高分Tips&quot;&gt;&lt;/a&gt;高分Tips&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;想的时候‘er….’是正常的，native speaker也会这样，但是想要以后就要一次说完一&lt;code&gt;整句&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;注意考虑回答的「完整性」，&lt;code&gt;正反&lt;/code&gt;都要论述。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;推荐替代「I-beg-your-pardon」？&quot;&gt;&lt;a href=&quot;#推荐替代「I-beg-your-pardon」？&quot; class=&quot;headerlink&quot; title=&quot;推荐替代「I beg your pardon」？&quot;&gt;&lt;/a&gt;推荐替代「I beg your pardon」？&lt;/h5&gt;&lt;p&gt;Would you mind repeating the question for me please?&lt;/p&gt;
&lt;h5 id=&quot;说不下去了咋办？&quot;&gt;&lt;a href=&quot;#说不下去了咋办？&quot; class=&quot;headerlink&quot; title=&quot;说不下去了咋办？&quot;&gt;&lt;/a&gt;说不下去了咋办？&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;转移话题，link to the area you good at&lt;/li&gt;
&lt;li&gt;吹牛，被发现也没事&lt;/li&gt;
&lt;li&gt;说你的父母朋友这种熟悉的人&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&quot;小作文&quot;&gt;&lt;a href=&quot;#小作文&quot; class=&quot;headerlink&quot; title=&quot;小作文&quot;&gt;&lt;/a&gt;小作文&lt;/h4&gt;&lt;p&gt;描述图、表、流程图。20min，150words。&lt;/p&gt;
&lt;h5 id=&quot;推荐方法-1&quot;&gt;&lt;a href=&quot;#推荐方法-1&quot; class=&quot;headerlink&quot; title=&quot;推荐方法&quot;&gt;&lt;/a&gt;推荐方法&lt;/h5&gt;&lt;p&gt;一段介绍（3句），两段主体（各4句），一段结论（3句）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;介绍段。1句背景介绍，换种方式描述下图表(paraphrasing题目)。&lt;code&gt;2个主要趋势&lt;/code&gt;，各一句, 趋势要描述出来。（次段忌题详细数据）&lt;/li&gt;
&lt;li&gt;主体段。分别讲第一段提到的两个大趋势的&lt;code&gt;细节&lt;/code&gt;。（描述细节：最值、比较、增长最快…）&lt;/li&gt;
&lt;li&gt;总结。把上面两段换种说法复述一遍。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;高分Tips-2&quot;&gt;&lt;a href=&quot;#高分Tips-2&quot; class=&quot;headerlink&quot; title=&quot;高分Tips&quot;&gt;&lt;/a&gt;高分Tips&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;make a plan。计划下写哪俩趋势，用哪些数据支撑。&lt;/li&gt;
&lt;li&gt;多花点时间看懂图表。意思理解偏差直接低分。&lt;/li&gt;
&lt;li&gt;write &lt;code&gt;facts&lt;/code&gt;, no opinions!&lt;/li&gt;
&lt;li&gt;不要直接写数字（figure），加工一下。&lt;ul&gt;
&lt;li&gt;19%==just under a fifth&lt;/li&gt;
&lt;li&gt;20%==one in five&lt;/li&gt;
&lt;li&gt;25%==a quarter&lt;/li&gt;
&lt;li&gt;51%==approximately half&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;Paraphrasing建议&quot;&gt;&lt;a href=&quot;#Paraphrasing建议&quot; class=&quot;headerlink&quot; title=&quot;Paraphrasing建议&quot;&gt;&lt;/a&gt;Paraphrasing建议&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;graph = line graph / bar chart&lt;/li&gt;
&lt;li&gt;diagram = figure&lt;/li&gt;
&lt;li&gt;shows = illustrates / compares&lt;/li&gt;
&lt;li&gt;proportion = percentage&lt;/li&gt;
&lt;li&gt;from 1999 to 2009 = between 1999 to 2009 / over a period of 10 years&lt;/li&gt;
&lt;li&gt;how to produce = the process of producing&lt;/li&gt;
&lt;li&gt;in three countries = in the UK, France and Spain&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;重要表达&quot;&gt;&lt;a href=&quot;#重要表达&quot; class=&quot;headerlink&quot; title=&quot;重要表达&quot;&gt;&lt;/a&gt;重要表达&lt;/h5&gt;&lt;p&gt;&lt;code&gt;下降&lt;/code&gt;==decrease, drop, go down, fall, plummet, plunge&lt;br&gt;&lt;code&gt;上升&lt;/code&gt;==grow, rise, go up, roar, surge&lt;br&gt;&lt;code&gt;波动&lt;/code&gt;==fluctuate&lt;br&gt;&lt;code&gt;稳定&lt;/code&gt;==remain stable&lt;br&gt;&lt;code&gt;达到最高点&lt;/code&gt;==peak at&lt;br&gt;&lt;code&gt;达到最低点&lt;/code&gt;==bottom out&lt;br&gt;&lt;code&gt;主要变化&lt;/code&gt;==major change&lt;/p&gt;
&lt;p&gt;&lt;code&gt;副词汇总&lt;/code&gt;==slightly, sharply, steadily, considerably, gradually, significantly,  relatively, dramatically&lt;br&gt;&lt;code&gt;关于XX&lt;/code&gt;==with regards to xx&lt;br&gt;&lt;code&gt;相对于XX&lt;/code&gt;==compared to XX&lt;br&gt;&lt;code&gt;相当于&lt;/code&gt;==amount to&lt;br&gt;&lt;code&gt;由于&lt;/code&gt;==stem from&lt;/p&gt;
&lt;p&gt;&lt;code&gt;增长3倍&lt;/code&gt;==3 times bigger==increased by 300%==tripled in size&lt;/p&gt;
&lt;h5 id=&quot;范例句子&quot;&gt;&lt;a href=&quot;#范例句子&quot; class=&quot;headerlink&quot; title=&quot;范例句子&quot;&gt;&lt;/a&gt;范例句子&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;第一句描述图表&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The two charts illustrate how much time male and female Australians spend on activities around the house.&lt;/li&gt;
&lt;li&gt;This bar chart illustrate the percentage of people who spend time on different mobile phone activities each week in 2001 compared to 2013.&lt;/li&gt;
&lt;li&gt;The line graph illustrate the amount of three lands of spreads(margarine, low fat and reduced spreads and butter) which were consumed over 26 years from 1981 to 2007. &lt;strong&gt;Units are measured in grams.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第二句大趋势&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The data suggests that Australian men and women prefer to do different tasks around the home, with women spending more time on most household activities than men.&lt;/li&gt;
&lt;li&gt;Overall, the consumption of margarine and butter decreased over period given while for low fat and reduced spreads, it rose.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;中间细节描述&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At the start of the period, butter was the most popular spread, which was replaced by margarine from 1991 to 2001, and following that low fat and reduced spreads became the most widely used spread in the final years.&lt;/li&gt;
&lt;li&gt;With regards to the amount of butter used, it began at around 140 grams and then peaked at 160 grams in 1986 before falling dramatically to about 50 grams in the last year.&lt;/li&gt;
&lt;li&gt;Likewise, approximately 90 grams of margarine was eaten in the first year after which the figure fluctuated slightly and dropped to a low of 40 grams in 2007.&lt;/li&gt;
&lt;li&gt;In 2001, approximately 35% of people spent time on social networking compared to 50% in 2013.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;阅读&quot;&gt;&lt;a href=&quot;#阅读&quot; class=&quot;headerlink&quot; title=&quot;阅读&quot;&gt;&lt;/a&gt;阅读&lt;/h4&gt;&lt;p&gt;60min，3篇文章，40道题。/是非题、选择题、填空总结题、连线题&lt;/p&gt;
&lt;h5 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;读题要仔细！限定词&lt;/li&gt;
&lt;li&gt;题量大，时间控制非常重要&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;推荐方法-2&quot;&gt;&lt;a href=&quot;#推荐方法-2&quot; class=&quot;headerlink&quot; title=&quot;推荐方法&quot;&gt;&lt;/a&gt;推荐方法&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;skimming（快速浏览一下文章，重点读首尾段、每段首尾。同时注意标注&lt;code&gt;路标&lt;/code&gt;，如：日期、人名地名、事件等，方面scaning）&lt;/li&gt;
&lt;li&gt;看下文章是否有「时间顺序」（chronological）&lt;/li&gt;
&lt;li&gt;scanning（通过读题，快速定位答案的位置）&lt;/li&gt;
&lt;li&gt;只有少量的位置仔细读。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&quot;听力&quot;&gt;&lt;a href=&quot;#听力&quot; class=&quot;headerlink&quot; title=&quot;听力&quot;&gt;&lt;/a&gt;听力&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;注意重音词，通常是出题点。&lt;/li&gt;
&lt;li&gt;注意语调。&lt;br&gt;「个人认为均无实际作用」&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;华尔街英语雅思课程笔记。&lt;/p&gt;
&lt;h4 id=&quot;大作文&quot;&gt;&lt;a href=&quot;#大作文&quot; class=&quot;headerlink&quot; title=&quot;大作文&quot;&gt;&lt;/a&gt;大作文&lt;/h4&gt;&lt;p&gt;议论文，40min，250words（少字低分）&lt;/p&gt;
&lt;h5 id=&quot;高分Tips&quot;&gt;&lt;
    
    </summary>
    
      <category term="english" scheme="http://Rocklu.me/categories/english/"/>
    
    
  </entry>
  
  <entry>
    <title>C++的本质</title>
    <link href="http://Rocklu.me/2015/12/22/C++%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>http://Rocklu.me/2015/12/22/C++的本质/</id>
    <published>2015-12-21T16:00:00.000Z</published>
    <updated>2016-03-29T09:36:06.000Z</updated>
    
    <content type="html">&lt;p&gt;此笔记为C++之父2014年的讲座『the essence of C++』。讲了cpp的本质以及近年来cpp11及14的改进。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;CPP的设计用途&quot;&gt;&lt;a href=&quot;#CPP的设计用途&quot; class=&quot;headerlink&quot; title=&quot;CPP的设计用途&quot;&gt;&lt;/a&gt;CPP的设计用途&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;系统编程&lt;/li&gt;
&lt;li&gt;嵌入式系统&lt;/li&gt;
&lt;li&gt;资源限制的系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;CPP的抽象层级&quot;&gt;&lt;a href=&quot;#CPP的抽象层级&quot; class=&quot;headerlink&quot; title=&quot;CPP的抽象层级&quot;&gt;&lt;/a&gt;CPP的抽象层级&lt;/h4&gt;&lt;p&gt;「轻量级」抽象的编程语言，希望用最小的代价实现抽象。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;关于「资源管理」&quot;&gt;&lt;a href=&quot;#关于「资源管理」&quot; class=&quot;headerlink&quot; title=&quot;关于「资源管理」&quot;&gt;&lt;/a&gt;关于「资源管理」&lt;/h4&gt;&lt;p&gt;任何资源（包括内存、文件、socket、锁、线程等）都应该使用一个&lt;code&gt;handle&lt;/code&gt;来管理。&lt;/p&gt;
&lt;h5 id=&quot;什么是handle？&quot;&gt;&lt;a href=&quot;#什么是handle？&quot; class=&quot;headerlink&quot; title=&quot;什么是handle？&quot;&gt;&lt;/a&gt;什么是handle？&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;A resource should be owned by a “handle”&lt;br&gt;A “handle” should present a well-defined and useful abstraction&lt;br&gt;E.g. a vector, string, file, thread&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;handle就是一个代理，由handle去持有资源、管理资源。外界持有handle就可以了。&lt;br&gt;这样做主要是为了贯彻&lt;code&gt;RAII&lt;/code&gt;的资源管理方式（Resource Acquisition Is Initialization），即「资源的handle在&lt;code&gt;初始化&lt;/code&gt;时持有这个资源，在&lt;code&gt;析构&lt;/code&gt;时释放资源」&lt;/p&gt;
&lt;h5 id=&quot;为啥需要handle？&quot;&gt;&lt;a href=&quot;#为啥需要handle？&quot; class=&quot;headerlink&quot; title=&quot;为啥需要handle？&quot;&gt;&lt;/a&gt;为啥需要handle？&lt;/h5&gt;&lt;p&gt;直接持有资源会容易在特殊情况下难以「释放」。例如：&lt;br&gt;1.中途抛出异常&lt;br&gt;2.中途退出函数&lt;br&gt;3.多线程间共享资源&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//其他代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delet p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//此时中间的代码如果抛异常，则内存泄露&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//好的写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; p(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;CPP标准库中设计好的handle&quot;&gt;&lt;a href=&quot;#CPP标准库中设计好的handle&quot; class=&quot;headerlink&quot; title=&quot;CPP标准库中设计好的handle&quot;&gt;&lt;/a&gt;CPP标准库中设计好的handle&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;STL中的vector、list、thread等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;(引用计数)、&lt;code&gt;unique_ptr&lt;/code&gt;(不带引用计数)&lt;/li&gt;
&lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;那什么时候用裸的指针？&quot;&gt;&lt;a href=&quot;#那什么时候用裸的指针？&quot; class=&quot;headerlink&quot; title=&quot;那什么时候用裸的指针？&quot;&gt;&lt;/a&gt;那什么时候用&lt;code&gt;裸的指针&lt;/code&gt;？&lt;/h5&gt;&lt;p&gt;仅在handle的内部。&lt;br&gt;「注」裸的数组也是不推荐使用的，容易被攻击，且没有越界检查。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;一个困扰的问题：如何从函数中传出大量数据？&quot;&gt;&lt;a href=&quot;#一个困扰的问题：如何从函数中传出大量数据？&quot; class=&quot;headerlink&quot; title=&quot;一个困扰的问题：如何从函数中传出大量数据？&quot;&gt;&lt;/a&gt;一个困扰的问题：如何从函数中传出大量数据？&lt;/h4&gt;&lt;p&gt;对于「工厂函数」或者其他要创造出新变量的函数，都需要在函数结束后返回一大堆&lt;code&gt;新的&lt;/code&gt;数据。处理方式主要有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回函数的局部变量（错误方法，堆内存在函数执行后被销毁）&lt;/li&gt;
&lt;li&gt;返回new出来地址的指针（有问题，谁有责任去释放这块内存？）&lt;/li&gt;
&lt;li&gt;返回new出来地址的引用（问题更大，外面的哥们儿怎么释放它？）&lt;/li&gt;
&lt;li&gt;预先准备好一个变量，作为「传出参数」（很丑，UNIX中常用）&lt;br&gt;在C++11，解决了这个问题。解决方式是：&lt;code&gt;移动构造函数&lt;/code&gt;(move constructor)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;啥是「移动」？&quot;&gt;&lt;a href=&quot;#啥是「移动」？&quot; class=&quot;headerlink&quot; title=&quot;啥是「移动」？&quot;&gt;&lt;/a&gt;啥是「移动」？&lt;/h5&gt;&lt;p&gt;从设计初衷的角度看，首先避免&lt;code&gt;拷贝一份然后把原来的销毁&lt;/code&gt;这种消耗资源的方式。其次对于传递指针地址的方式，主要问题也是出在「资源管理」。所以对于这样的资源如果用handle，只需要把handle持有的资源转移过去。这样copy的只是handle，代价小。&lt;/p&gt;
&lt;h5 id=&quot;所以移动的「前提」你要是一个handle。&quot;&gt;&lt;a href=&quot;#所以移动的「前提」你要是一个handle。&quot; class=&quot;headerlink&quot; title=&quot;所以移动的「前提」你要是一个handle。&quot;&gt;&lt;/a&gt;所以移动的「前提」你要是一个handle。&lt;/h5&gt;&lt;hr&gt;
&lt;h4 id=&quot;关于垃圾回收&quot;&gt;&lt;a href=&quot;#关于垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;关于垃圾回收&quot;&gt;&lt;/a&gt;关于垃圾回收&lt;/h4&gt;&lt;p&gt;垃圾回收的问题主要如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不可预测&lt;/li&gt;
&lt;li&gt;性能开销&lt;/li&gt;
&lt;li&gt;只管理内存，不管理其他资源（锁、线程等）&lt;br&gt;「注」：C++11开始也支持垃圾回收了。STL&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&quot;关于泛型&quot;&gt;&lt;a href=&quot;#关于泛型&quot; class=&quot;headerlink&quot; title=&quot;关于泛型&quot;&gt;&lt;/a&gt;关于泛型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;是一种廉价的（non-overhead）元编程&lt;/li&gt;
&lt;li&gt;CPP14给泛型增加了类似于&lt;code&gt;协议&lt;/code&gt;或者&lt;code&gt;接口&lt;/code&gt;的功能&lt;/li&gt;
&lt;li&gt;改善了泛型的错误提示&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;最后，附上链接：&lt;a href=&quot;https://www.youtube.com/watch?v=86xWVb4XIyE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.youtube.com/watch?v=86xWVb4XIyE&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;此笔记为C++之父2014年的讲座『the essence of C++』。讲了cpp的本质以及近年来cpp11及14的改进。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试算法笔记</title>
    <link href="http://Rocklu.me/2015/12/15/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://Rocklu.me/2015/12/15/面试算法笔记/</id>
    <published>2015-12-15T02:45:00.000Z</published>
    <updated>2016-03-29T09:36:17.000Z</updated>
    
    <content type="html">&lt;p&gt;记录一些经典的算法问题，希望举一反三。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;2-sum问题&quot;&gt;&lt;a href=&quot;#2-sum问题&quot; class=&quot;headerlink&quot; title=&quot;2-sum问题&quot;&gt;&lt;/a&gt;2-sum问题&lt;/h4&gt;&lt;p&gt;_&lt;/p&gt;
&lt;h5 id=&quot;问题简述：&quot;&gt;&lt;a href=&quot;#问题简述：&quot; class=&quot;headerlink&quot; title=&quot;问题简述：&quot;&gt;&lt;/a&gt;问题简述：&lt;/h5&gt;&lt;p&gt;给定一个值，在一组数字中，找出两个数，加起来的和等于这个给定的值。&lt;/p&gt;
&lt;h5 id=&quot;常规思路：&quot;&gt;&lt;a href=&quot;#常规思路：&quot; class=&quot;headerlink&quot; title=&quot;常规思路：&quot;&gt;&lt;/a&gt;常规思路：&lt;/h5&gt;&lt;p&gt;挨个取出元素，再与其他值挨个相加，判断是否等于需要的值。&lt;br&gt;「复杂度」：O(n2)&lt;/p&gt;
&lt;h5 id=&quot;好思路-hash优化&quot;&gt;&lt;a href=&quot;#好思路-hash优化&quot; class=&quot;headerlink&quot; title=&quot;好思路-hash优化&quot;&gt;&lt;/a&gt;好思路-hash优化&lt;/h5&gt;&lt;p&gt;取出元素后，并不需要与所有的其他值相加，只需要查找是否存在等于&lt;code&gt;「目标值-当前值」&lt;/code&gt;的元素。鉴于「线性查找」的复杂度较大，把元素存入hash表后再进行查找即可做到常数级时间复杂度。故总体的复杂度为O(n)。&lt;/p&gt;
&lt;p&gt;总结：对于算法中某个步骤涉及到「查找」的，可用hash&lt;code&gt;空间换时间&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;好思路-先排序再找&quot;&gt;&lt;a href=&quot;#好思路-先排序再找&quot; class=&quot;headerlink&quot; title=&quot;好思路-先排序再找&quot;&gt;&lt;/a&gt;好思路-先排序再找&lt;/h5&gt;&lt;p&gt;先对所有元素进行排序，然后用双指针一头一尾。加起来偏大就移尾巴，加起来偏小就移头。迭代多次后可以找到需要的两个数。&lt;br&gt;「复杂度」：O(nlogn) + O(n) = O(nlogn)&lt;/p&gt;
&lt;p&gt;「我的疑问」：这样子，不会跑过头吗？那会不会尾巴尾巴一直加加加过头了？&lt;br&gt;「答」：不会。因为如果一直偏小，尾巴指针到达较小的那个数时，这时加起来的「和」一定就大于目标了，所以这时一定会是头部指针移动，尾巴指针停在那个位置。除非不存在这两个数，那么两个指针会相遇。&lt;/p&gt;
&lt;p&gt;总结：对数据进行预处理，在计算复杂度时是与后续步骤&lt;code&gt;「相加」&lt;/code&gt;的，那就只会取一个较大的值。相对于复杂的算法（相乘）会比较划算。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;KMP简要思路&quot;&gt;&lt;a href=&quot;#KMP简要思路&quot; class=&quot;headerlink&quot; title=&quot;KMP简要思路&quot;&gt;&lt;/a&gt;KMP简要思路&lt;/h4&gt;&lt;p&gt;在字符串匹配中，KMP解决暴力法中「指针回溯」的问题（复杂度O(M*N)），做到线性复杂度。但是理解起来有点困难，核心点是以下两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于&lt;code&gt;各不相同&lt;/code&gt;的pattern串，前一次比较时与目标串匹配的这些字符，&lt;code&gt;一定不可能和pattern「首字符」相同&lt;/code&gt;，因为「首字符」不等于「后面的字符」，而这些字符与pattern串「后面的字符」已经匹配相同，所以这些都不用比较，首字符就不匹配了。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;后面有与首字符相同&lt;/code&gt;的情况，上面的假设就不成立了。既然pattern串前后有相同，那就要从首次相同的位置再次进行比较。所以我们在KMP算法中的next数组是&lt;code&gt;这个位置往前的「最长首尾相同字串」&lt;/code&gt;。最后，因为既然已经知道这几个字串是相同的，那也不用比较了，直接从下一个位置开始就好了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;「另外」next数组的意思是什么？&lt;br&gt;直观的理解，next数组的每个元素，表示当匹配到这个元素不相等时，与目标串位置&lt;code&gt;下一个&lt;/code&gt;参加比较的pattern串的「下标」。（未验证）&lt;/p&gt;
&lt;h5 id=&quot;KMP的最坏情况&quot;&gt;&lt;a href=&quot;#KMP的最坏情况&quot; class=&quot;headerlink&quot; title=&quot;KMP的最坏情况&quot;&gt;&lt;/a&gt;KMP的最坏情况&lt;/h5&gt;&lt;p&gt;pattern串中大量相等时（最差是全部相等），next数组值会越来越大。导致效率降低（复杂度上界为O(2N)）。&lt;br&gt;「解决」改进的KMP，就是计算next数组时，如果发现next到的元素与当前元素相同，那就肯定不会匹配成功，那就跳过它，直接比较next元素的next就好了。在数组中，就表现为：&lt;br&gt;&lt;code&gt;若P[next[i]]==P[i];&lt;/code&gt;&lt;br&gt;=&amp;gt;&lt;br&gt;&lt;code&gt;则next[i]=next[next[i]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;「注意」KMP远没有那么简单，书中还设计到「自动机理论」，实际算法中求next数组算法也非常精妙。有待补充深入。&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些经典的算法问题，希望举一反三。&lt;/p&gt;
    
    </summary>
    
      <category term="theory" scheme="http://Rocklu.me/categories/theory/"/>
    
    
  </entry>
  
  <entry>
    <title>牛顿迭代法</title>
    <link href="http://Rocklu.me/2015/12/02/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/"/>
    <id>http://Rocklu.me/2015/12/02/牛顿迭代法/</id>
    <published>2015-12-02T15:38:00.000Z</published>
    <updated>2016-03-29T09:36:23.000Z</updated>
    
    <content type="html">&lt;p&gt;牛顿迭代法求平方根，一直知其然不知其所以然。为啥这个公式算出来能逼近？为啥逼近的就是根？今天认真学了一下，总算有点直观认知。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h4&gt;&lt;p&gt;求方程根的近似解。&lt;/p&gt;
&lt;h4 id=&quot;直观解释&quot;&gt;&lt;a href=&quot;#直观解释&quot; class=&quot;headerlink&quot; title=&quot;直观解释&quot;&gt;&lt;/a&gt;直观解释&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;首先，我们想要求的是「函数与x轴的交点」。&lt;/li&gt;
&lt;li&gt;好，根据泰勒展开理论，「函数的切线」是「函数」的近似，于是&lt;code&gt;「切线与x轴的交点」&lt;/code&gt;是「函数与x轴交点」的一个近似。也就是说这个切线的交点（新x），会更接近函数与x轴的交点。&lt;/li&gt;
&lt;li&gt;每次迭代，就是在该点去计算「切线与x轴交点」得到一个新的近似值的过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;理论证明&quot;&gt;&lt;a href=&quot;#理论证明&quot; class=&quot;headerlink&quot; title=&quot;理论证明&quot;&gt;&lt;/a&gt;理论证明&lt;/h4&gt;&lt;p&gt;根据泰勒展开式，y = f(x0)+f’(x0)(x-x0)+&lt;code&gt;o(x)&lt;/code&gt;&lt;br&gt;而在x0处的切线为：y = f(x0)+f’(x0)(x-x0)&lt;br&gt;这两式说明切线与函数本身&lt;code&gt;在小范围内的差别&lt;/code&gt;是一个高阶无穷小。于是我们去掉后面的无穷小，用切线替代原来的函数，得到它的根，就是与x轴的交点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x = x0-f(x0)/f’(x0)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是牛顿迭代法的「迭代公式」。&lt;br&gt;[注]泰勒展开的几何意义为函数的分解，理论上所有项加起来以后就是原来函数。&lt;/p&gt;
&lt;h4 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h4&gt;&lt;p&gt;能化解为「方程根」问题的情况，比如求「极值」，转化为「导函数」的根。&lt;/p&gt;
&lt;h4 id=&quot;方法失效&quot;&gt;&lt;a href=&quot;#方法失效&quot; class=&quot;headerlink&quot; title=&quot;方法失效&quot;&gt;&lt;/a&gt;方法失效&lt;/h4&gt;&lt;p&gt;不能有&lt;code&gt;「重根」&lt;/code&gt;。&lt;br&gt;重根的情况就是「函数与x轴相切」，相切出导数趋近于0。可以直观得看出牛顿法在这种情况并不收敛。&lt;/p&gt;
&lt;h4 id=&quot;优化&quot;&gt;&lt;a href=&quot;#优化&quot; class=&quot;headerlink&quot; title=&quot;优化&quot;&gt;&lt;/a&gt;优化&lt;/h4&gt;&lt;p&gt;选一个更好的「初始值」会有利于更快得到比较接近的结果。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;牛顿迭代法求平方根，一直知其然不知其所以然。为啥这个公式算出来能逼近？为啥逼近的就是根？今天认真学了一下，总算有点直观认知。&lt;/p&gt;
    
    </summary>
    
      <category term="theory" scheme="http://Rocklu.me/categories/theory/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS毛玻璃效果</title>
    <link href="http://Rocklu.me/2015/11/10/iOS%E6%AF%9B%E7%8E%BB%E7%92%83%E6%95%88%E6%9E%9C/"/>
    <id>http://Rocklu.me/2015/11/10/iOS毛玻璃效果/</id>
    <published>2015-11-10T10:40:00.000Z</published>
    <updated>2016-03-29T09:36:37.000Z</updated>
    
    <content type="html">&lt;p&gt;自从iOS8，apple官方开放了「毛玻璃」特效的API，用起来有点奇怪。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要使用UIView的子类&lt;code&gt;UIVisualEffectView&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这个view的&lt;code&gt;backgroundColor&lt;/code&gt;必须是&lt;code&gt;clearColor&lt;/code&gt;，否则无效&lt;/li&gt;
&lt;li&gt;这个view的subView都会被模糊，如果只想背景模糊，其他部件需要与之平级，不要添加为它的subView！&lt;/li&gt;
&lt;li&gt;所以需要一个容器view用来存放这个view和其他部件，这个容器也应该是clearColor，注意alpha不要小于1，否则所有子view都会受影响。&lt;/li&gt;
&lt;li&gt;设置这个view的&lt;code&gt;effect&lt;/code&gt;属性，值为：&lt;code&gt;[UIBlurEffect effectWithStyle:UIBlurEffectStyleLight]&lt;/code&gt;。注意有light，dark，extraLight三种可选。&lt;/li&gt;
&lt;li&gt;如果觉得默认的太透明了，想要一点&lt;code&gt;白底&lt;/code&gt;，请不要改变上述的颜色。正确做法是在毛玻璃特效的后面（平级）加入一个半透明的view（alpha0.3），这个view的颜色设置为乳白色或者灰色会有不错的效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[注意]带有毛玻璃特效的view最好不要参与动画，特效在动画中不会被渲染，只有停下来才有效果。如果有动画会一下次出现背景比较突兀。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;自从iOS8，apple官方开放了「毛玻璃」特效的API，用起来有点奇怪。&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://Rocklu.me/categories/IOS/"/>
    
    
  </entry>
  
  <entry>
    <title>App服务端搭建</title>
    <link href="http://Rocklu.me/2015/10/22/app%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA/"/>
    <id>http://Rocklu.me/2015/10/22/app服务端搭建/</id>
    <published>2015-10-22T10:25:00.000Z</published>
    <updated>2016-03-29T09:36:43.000Z</updated>
    
    <content type="html">&lt;p&gt;搭建一个简单的app后端其实并没有太大的技术含量，但是这个过程中还是遇到一些坑的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;服务器的连接&quot;&gt;&lt;a href=&quot;#服务器的连接&quot; class=&quot;headerlink&quot; title=&quot;服务器的连接&quot;&gt;&lt;/a&gt;服务器的连接&lt;/h4&gt;&lt;p&gt;对于云端的服务器来说，首先遇到的问题是：代码虽然可以远程用vim写，长期看来总需要传文件，怎么方便？&lt;br&gt;答：&lt;code&gt;scp&lt;/code&gt;命令。[注]批量传输可用通配符，但是需要加转义斜杠.&lt;/p&gt;
&lt;p&gt;例子：&lt;br&gt;&lt;code&gt;scp root@120.27.54.111:/var/www/\*.php ~/Desktop&lt;/code&gt;&lt;br&gt;&lt;code&gt;scp statistic.php root@120.27.54.111:/var/www/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外，对于在线编辑代码的延迟，有什么解决方案嘛？&lt;br&gt;答：&lt;code&gt;mosh&lt;/code&gt;开源shell，可以在本地进行预判响应。&lt;/p&gt;
&lt;h4 id=&quot;服务编写&quot;&gt;&lt;a href=&quot;#服务编写&quot; class=&quot;headerlink&quot; title=&quot;服务编写&quot;&gt;&lt;/a&gt;服务编写&lt;/h4&gt;&lt;p&gt;补充两个原来不清楚的知识：&lt;br&gt;1.对于app服务器，80端口需要让出来给网页，apache服务器怎么更换监听端口？&lt;br&gt;答：配置文件夹里找到&lt;code&gt;「ports.conf」&lt;/code&gt;，里面有一句&lt;code&gt;listen 80&lt;/code&gt;，我相信你懂了。然后记得重启apache。&lt;/p&gt;
&lt;p&gt;2.想要定期运行脚本清理数据库怎么实现？&lt;br&gt;答：&lt;code&gt;crontab&lt;/code&gt;命令。&lt;code&gt;-e&lt;/code&gt;编辑，&lt;code&gt;-l&lt;/code&gt;就是list，&lt;code&gt;-r&lt;/code&gt;删除。&lt;/p&gt;
&lt;p&gt;3.PHP的本地调试&lt;br&gt;好吧，我是最近才知道php可以本地执行的，&lt;code&gt;php PHP_filePath&lt;/code&gt;就能运行了，直接echo在命令行里。&lt;/p&gt;
&lt;p&gt;4.关于状态码「&lt;code&gt;重要&lt;/code&gt;」&lt;br&gt;可能是由于约定俗称的原因，服务端返回的状态码基本与HTTP协议一致，AFNetwording网络库就规定只有200-299的状态码才算“成功”。&lt;br&gt;对于HTTP状态码，引用一个最近看到的cheatsheet，非常形象：&lt;br&gt;1xx, hold on （等一下，正在处理）&lt;br&gt;2xx, here you go!  （ok，正确）&lt;br&gt;3xx, go away  （跳转至其他页面）&lt;br&gt;4xx, you fucked up  （请求错误，如404页面不存在）&lt;br&gt;5xx, I fucked up  （服务器错误，如502 bad gateway）&lt;/p&gt;
&lt;h4 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h4&gt;&lt;p&gt;1.本地缓存，就是写磁盘文件。&lt;br&gt;2.radis内存缓存。&lt;/p&gt;
&lt;h4 id=&quot;其他注意事项&quot;&gt;&lt;a href=&quot;#其他注意事项&quot; class=&quot;headerlink&quot; title=&quot;其他注意事项&quot;&gt;&lt;/a&gt;其他注意事项&lt;/h4&gt;&lt;p&gt;为了防止app端挂掉，尽量在服务端出错时也给予响应。&lt;/p&gt;
&lt;p&gt;进一步参考：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/shangdahao/archive/2013/06/01/3111755.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/shangdahao/archive/2013/06/01/3111755.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;搭建一个简单的app后端其实并没有太大的技术含量，但是这个过程中还是遇到一些坑的。&lt;/p&gt;
    
    </summary>
    
      <category term="TOOLS" scheme="http://Rocklu.me/categories/TOOLS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS9更新后的坑</title>
    <link href="http://Rocklu.me/2015/10/14/iOS9%E6%9B%B4%E6%96%B0%E5%90%8E%E7%9A%84%E5%9D%91/"/>
    <id>http://Rocklu.me/2015/10/14/iOS9更新后的坑/</id>
    <published>2015-10-14T03:34:00.000Z</published>
    <updated>2016-03-29T09:36:52.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS9出现以后，不但swift出了2.0版本，项目中也有很多其他地方做了更改。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;Bitcode&quot;&gt;&lt;a href=&quot;#Bitcode&quot; class=&quot;headerlink&quot; title=&quot;Bitcode&quot;&gt;&lt;/a&gt;Bitcode&lt;/h4&gt;&lt;p&gt;Bitcode is an intermediate representation of a compiled program. Apps you upload to iTunes Connect that contain bitcode will be compiled and linked on the App Store. Including bitcode will allow Apple to re-optimize your app binary in the future without the need to submit a new version of your app to the store.&lt;/p&gt;
&lt;p&gt;Note: For iOS apps, bitcode is the default, but optional. If you provide bitcode, all apps and frameworks in the app bundle need to include bitcode. For watchOS apps, bitcode is required&lt;/p&gt;
&lt;p&gt;简而言之就是用来支持增量更新的，默认开启，开启后可能会给包含C++库的项目造成无法编译的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;如何关闭？&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;项目配置-〉build option里面&lt;/p&gt;
&lt;h4 id=&quot;app中的HTTP请求被禁了&quot;&gt;&lt;a href=&quot;#app中的HTTP请求被禁了&quot; class=&quot;headerlink&quot; title=&quot;app中的HTTP请求被禁了&quot;&gt;&lt;/a&gt;app中的HTTP请求被禁了&lt;/h4&gt;&lt;p&gt;错误信息有：&lt;code&gt;App Transport Security&lt;/code&gt;这样的，主要是因为apple建议使用&lt;code&gt;HTTPS&lt;/code&gt;而不是&lt;code&gt;HTTP&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;如何解决？&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;在项目的&lt;code&gt;plist&lt;/code&gt;文件中，新建「字典」&lt;code&gt;NSAppTransportSecurity&lt;/code&gt;，在这个字典中，新建「布尔值」项目&lt;code&gt;NSAllowsArbitraryLoads&lt;/code&gt;，并将其设置为&lt;code&gt;YES&lt;/code&gt;。OK。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面是一些其他的坑。&lt;/p&gt;
&lt;h4 id=&quot;启动图片比你想象得要重要&quot;&gt;&lt;a href=&quot;#启动图片比你想象得要重要&quot; class=&quot;headerlink&quot; title=&quot;启动图片比你想象得要重要&quot;&gt;&lt;/a&gt;启动图片比你想象得要重要&lt;/h4&gt;&lt;p&gt;iOS7闪退因为启动图片不对，app打开后画面不能撑满屏幕因为启动图片在项目中设置得不对。这种诡异的bug浪费了我大量的时间。&lt;/p&gt;
&lt;h4 id=&quot;签名证书的问题&quot;&gt;&lt;a href=&quot;#签名证书的问题&quot; class=&quot;headerlink&quot; title=&quot;签名证书的问题&quot;&gt;&lt;/a&gt;签名证书的问题&lt;/h4&gt;&lt;p&gt;怪事1: ad-hoc分发给测试人员闪退，且在本机使用真实手机调试（手机连在电脑上测试）说进程丢失。而直接在手机中跑却ok。&lt;br&gt;原因：在building setting里面不是有设置code signing嘛，develop就用develop的证书，release就用release的证书。我本来全都用release的，查了stack overflow才知道这还有讲究。&lt;/p&gt;
&lt;p&gt;怪事2: 在开发者中心注册、并且下载了最新的证书，在export安装包签名的时候却仍旧默认用老的证书。&lt;br&gt;原因：这是xcode的bug，默认就是使用列表里面的第一个，需要手动把老的证书删除，注意要在xcode里面删除，在文件夹里面删除没用的。&lt;/p&gt;
&lt;h4 id=&quot;关于Swift与OC混合编程&quot;&gt;&lt;a href=&quot;#关于Swift与OC混合编程&quot; class=&quot;headerlink&quot; title=&quot;关于Swift与OC混合编程&quot;&gt;&lt;/a&gt;关于Swift与OC混合编程&lt;/h4&gt;&lt;p&gt;实际测试下来，混合编程后在iOS7会发生无缘无故的bug导致闪退。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS9出现以后，不但swift出了2.0版本，项目中也有很多其他地方做了更改。&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://Rocklu.me/categories/IOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Unity3d使用SqLite的坑</title>
    <link href="http://Rocklu.me/2015/09/23/Unity3d%E4%BD%BF%E7%94%A8SqLite%E7%9A%84%E5%9D%91/"/>
    <id>http://Rocklu.me/2015/09/23/Unity3d使用SqLite的坑/</id>
    <published>2015-09-22T22:19:00.000Z</published>
    <updated>2016-03-29T09:37:01.000Z</updated>
    
    <content type="html">&lt;p&gt;SqLite作为轻量级C语言本地数据库，一直是挺讨我喜欢。这次实验室的Unity项目需要本地数据库，就研究了下怎么在Unity3D中集成sqlite。想不到坑那么多，各种坑，也是醉了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create new folder under Assets Folder Rename it &lt;code&gt;Plugins&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;sqlite3.def&lt;/code&gt; and sqlite3.dll into &lt;code&gt;Assets/Plugins&lt;/code&gt; in your unity project .You can download these files here &lt;code&gt;http://www.sqlite.org/download.html&lt;/code&gt; for windows (Precompiled Binaries for Windows)&lt;/li&gt;
&lt;li&gt;Download SQLite Browser &lt;code&gt;https://github.com/sqlitebrowser/sqlitebrowser&lt;/code&gt;（GUI数据库编辑器）&lt;/li&gt;
&lt;li&gt;Create Database in &lt;code&gt;Assets&lt;/code&gt; folder in your unity project using SQLite Browser.（必须先手动创建好）&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;System.Data.dll&lt;/code&gt; and &lt;code&gt;Mono.Data.Sqlite.dll&lt;/code&gt; from &lt;code&gt;C:\Program Files (x86)\Unity \Editor\Data\Mono\lib\mono\2.0*&lt;/code&gt; and paste them in your &lt;code&gt;Assets/Plugins*&lt;/code&gt; folder in your unity project.&lt;/li&gt;
&lt;li&gt;Add these namespaces &lt;code&gt;using Mono.Data.Sqlite; using System.Data; using System;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后，可以写一个helper类，unity里面可以自动引用。核心代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string dbName =  &amp;quot;/testDatabase.db&amp;quot;;   //注意这里很容易出错，小心别漏了/号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string tableName = &amp;quot;testTable&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//开始建立连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string conn = &amp;quot;URI=file:&amp;quot; + Application.dataPath + dbName; //Path to database.         IDbConnection dbconn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbconn = (IDbConnection)new SqliteConnection(conn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbconn.Open(); //Open connection to the database.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//准备查询语句&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IDbCommand dbcmd = dbconn.CreateCommand();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string sqlQuery = &amp;quot;SELECT * FROM &amp;quot; + tableName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbcmd.CommandText = sqlQuery;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//执行语句&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IDataReader reader = dbcmd.ExecuteReader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面开始处理返回数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while (reader.Read())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int ID = reader.GetInt32(0);      //返回一个数组，下标0则第一个字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string text = reader.GetString(1) + &amp;apos;\n&amp;apos;;   //第二个字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Debug.Log(&amp;quot;ID= &amp;quot; + ID + &amp;quot;  name =&amp;quot; + name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面开始关闭连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reader.Close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reader = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbcmd.Dispose();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbcmd = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbconn.Close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbconn = null;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;坑在哪里？&quot;&gt;&lt;a href=&quot;#坑在哪里？&quot; class=&quot;headerlink&quot; title=&quot;坑在哪里？&quot;&gt;&lt;/a&gt;坑在哪里？&lt;/h5&gt;&lt;p&gt;这样子在编辑器里面就OK了，可是！不能编译。。。醉了，查了一下，需要调整Unity项目的设置，如下：&lt;br&gt;&lt;code&gt;PlayerSetting -&amp;gt; Other Settings -&amp;gt; Optimization -&amp;gt; Api Compatibility Level&lt;/code&gt;这个下拉菜单，手动选择为：&lt;code&gt;.NET 2.0&lt;/code&gt;。&lt;br&gt;于是我们终于可以编译了。&lt;/p&gt;
&lt;h5 id=&quot;别高兴太早，编译好之后的程序访问不了数据库。。。。&quot;&gt;&lt;a href=&quot;#别高兴太早，编译好之后的程序访问不了数据库。。。。&quot; class=&quot;headerlink&quot; title=&quot;别高兴太早，编译好之后的程序访问不了数据库。。。。&quot;&gt;&lt;/a&gt;别高兴太早，编译好之后的程序访问不了数据库。。。。&lt;/h5&gt;&lt;p&gt;经过长时间的反复排查，最后打印了db的路径，终于发现。。。编译的时候没有把数据库复制过去。。。需要&lt;code&gt;手动&lt;/code&gt;把数据库复制到各个平台的运行文件中。&lt;br&gt;具体路径可打印&lt;code&gt;Application.dataPath&lt;/code&gt;获得。&lt;/p&gt;
&lt;p&gt;真不容易。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;SqLite作为轻量级C语言本地数据库，一直是挺讨我喜欢。这次实验室的Unity项目需要本地数据库，就研究了下怎么在Unity3D中集成sqlite。想不到坑那么多，各种坑，也是醉了。&lt;/p&gt;
    
    </summary>
    
      <category term="TOOLS" scheme="http://Rocklu.me/categories/TOOLS/"/>
    
    
  </entry>
  
  <entry>
    <title>读《现代操作系统》</title>
    <link href="http://Rocklu.me/2015/09/09/%E8%AF%BB%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://Rocklu.me/2015/09/09/读现代操作系统/</id>
    <published>2015-09-09T07:26:00.000Z</published>
    <updated>2016-03-29T09:37:50.000Z</updated>
    
    <content type="html">&lt;p&gt;考研的时候操作系统是学得最好的一门课，看这本书主要是拾遗补缺。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;操作系统的功能：&quot;&gt;&lt;a href=&quot;#操作系统的功能：&quot; class=&quot;headerlink&quot; title=&quot;操作系统的功能：&quot;&gt;&lt;/a&gt;操作系统的功能：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;硬件抽象（文件）&lt;/li&gt;
&lt;li&gt;资源管理&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;进程和线程若干细节&quot;&gt;&lt;a href=&quot;#进程和线程若干细节&quot; class=&quot;headerlink&quot; title=&quot;进程和线程若干细节&quot;&gt;&lt;/a&gt;进程和线程若干细节&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;每个进程在自己的虚拟地址空间中，拥有独立的堆栈。&lt;/li&gt;
&lt;li&gt;fork是UNIX系统中唯一能创建新进程的system call。&lt;/li&gt;
&lt;li&gt;创建一个进程的速度，比创建一个线程慢1-2个数量级&lt;/li&gt;
&lt;li&gt;对于「&lt;code&gt;内核级线程&lt;/code&gt;」系统内核空间中，保存了「进程表」（包含pcb）和「线程表」（包含每个线程的寄存器）。对于「&lt;code&gt;用户级线程&lt;/code&gt;」，则有进程自己管理线程表。&lt;/li&gt;
&lt;li&gt;「重要的事情再强调一遍」：进程是资源调度的单位，线程是CPU调度的单位。&lt;/li&gt;
&lt;li&gt;system call的时候，调度器没有执行，仍然是当前进程在工作。只是进入内核态以后，该进程有另外的堆栈及pc计数器（&lt;code&gt;内核上下文&lt;/code&gt;），拥有高权限。这个内核上下文是用来应对内核态时遇到的时间片轮转以及阻塞后的恢复，同样存放在pcb中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Linux的进程内存地址空间细节&quot;&gt;&lt;a href=&quot;#Linux的进程内存地址空间细节&quot; class=&quot;headerlink&quot; title=&quot;Linux的进程内存地址空间细节&quot;&gt;&lt;/a&gt;Linux的进程内存地址空间细节&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;32位机器上，linux虚拟地址空间位4GB，1GB给操作系统，其他给进程。这1GB只有在内核态时可被访问。「注意」windows应该是2GB&lt;/li&gt;
&lt;li&gt;内核的1GB，在&lt;code&gt;虚拟地址空间&lt;/code&gt;中是&lt;code&gt;高地址&lt;/code&gt;（顶部），然而映射到&lt;code&gt;物理内存&lt;/code&gt;中是最&lt;code&gt;低地址&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;进程的3GB虚拟空间中，最底下是&lt;code&gt;代码段&lt;/code&gt;，从0地址开始。接着往上是&lt;code&gt;已经初始化的全局变量&lt;/code&gt;，操作系统并不区分这两者。再往上是&lt;code&gt;未初始化的全局变量&lt;/code&gt;（历史上叫BSS，原因不明），可以&lt;code&gt;向上&lt;/code&gt;动态增长，也就是传说中的&lt;code&gt;heap堆&lt;/code&gt;。中间空白，然后到最顶上，贴着3GB的顶，是&lt;code&gt;stack栈&lt;/code&gt;，每次调用函数，&lt;code&gt;向下&lt;/code&gt;分配一块固定的大小。（所以，在函数定义时，栈大小必须是确定的。这是导致数组不能动态指定大小的原因。）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;文件系统补充&quot;&gt;&lt;a href=&quot;#文件系统补充&quot; class=&quot;headerlink&quot; title=&quot;文件系统补充&quot;&gt;&lt;/a&gt;文件系统补充&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;FAT表要读到内存里，太大的硬盘会让这个表很大占用内存&lt;/li&gt;
&lt;li&gt;inode统一放在磁盘的一片区域，然后有一个bit-map记录inode是否已用。（读入内存）&lt;/li&gt;
&lt;li&gt;Linux的文件系统叫ext2&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;日志文件系统（LFS）&quot;&gt;&lt;a href=&quot;#日志文件系统（LFS）&quot; class=&quot;headerlink&quot; title=&quot;日志文件系统（LFS）&quot;&gt;&lt;/a&gt;日志文件系统（LFS）&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;为什么要日志？：磁盘操作分多步骤（写目录，写inode，写文件），中间如果遇到故障就导致文件丢失。&lt;/li&gt;
&lt;li&gt;怎么办？：a)在做操作之前，在日志区域，写下将要做的操作。b)开始操作。c)操作完成后删除刚刚写的日志。&lt;/li&gt;
&lt;li&gt;有什么用呢？：于是如果中途出问题，就会在日志区域留下日志，系统开机时，只要检查日志区域如果有东西，就把那个日志再完整执行一遍即可。&lt;/li&gt;
&lt;li&gt;有什么overhead嘛？：有，所有的操作必须保证重复执行不会有副作用。（因为可能执行了几步断掉，然后重启后再执行一遍。）（这叫&lt;code&gt;幂等操作&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;安全问题&quot;&gt;&lt;a href=&quot;#安全问题&quot; class=&quot;headerlink&quot; title=&quot;安全问题&quot;&gt;&lt;/a&gt;安全问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;加密过程&lt;code&gt;‘盐’&lt;/code&gt;的作用？：主要担心对于已知加密算法的&lt;code&gt;预计算&lt;/code&gt;，黑客可以根据预计算的串与加密后的密码比对，从而得到密码。加盐可以让预计算失效。相当于个性化定制加密算法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一次性口令&lt;/code&gt;。「功能」：不怕网络流量嗅探，不怕服务器存储密码的文件被窃取。「步骤」：a)与服务器约定加密算法f，和加密次数n。b)首次登录时，用户给服务器的是&lt;code&gt;对原始密码用f加密n次的串&lt;/code&gt;，服务器存储这个值。c)第二次登录时，给服务器发送&lt;code&gt;对原始密码用f加密的n-1次的串&lt;/code&gt;，服务器只要把这个新串用f加密一次，与上一个密码比对一致即通过。d)当n被减到0时，重新来一次这样的设定。n的大小一般比较大。e)这样搞以后，就算黑客获取到本次的密码，但是无法计算出下一次的密码。「要求」：加密算法比较简单，应该算是一种简单的哈希，同时要求哈希完毕的产出长度与输入一致。这俩要求都是因为要迭代n次。另外的要求是不可逆。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;windows中的注册表&quot;&gt;&lt;a href=&quot;#windows中的注册表&quot; class=&quot;headerlink&quot; title=&quot;windows中的注册表&quot;&gt;&lt;/a&gt;windows中的注册表&lt;/h4&gt;&lt;p&gt;实质是统一集中管理的配置文件集合，在开机时载入内存。注册表让&lt;code&gt;热插拔&lt;/code&gt;成为可能。（书中并没有解释为什么，待科普）&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;附录：考研时期操作系统笔记精选&quot;&gt;&lt;a href=&quot;#附录：考研时期操作系统笔记精选&quot; class=&quot;headerlink&quot; title=&quot;附录：考研时期操作系统笔记精选&quot;&gt;&lt;/a&gt;附录：考研时期操作系统笔记精选&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;进程管理&quot;&gt;&lt;a href=&quot;#进程管理&quot; class=&quot;headerlink&quot; title=&quot;进程管理&quot;&gt;&lt;/a&gt;进程管理&lt;/h4&gt;&lt;p&gt;进程是操作系统管理运行中程序的一种抽象，由PCB进程管理。process control block。PCB存放在系统「内核空间」中，主要内容包含：&lt;br&gt;1) 资源清单（打开的文件等）&lt;br&gt;2) 进程的控制信息（代码段在虚地址空间的地址、&lt;code&gt;页表&lt;/code&gt;、根目录等）&lt;br&gt;3) CPU上下文 （寄存器值、堆栈指针）&lt;br&gt;4) 内核态CPU上下文&lt;/p&gt;
&lt;h4 id=&quot;进程调度的几个思想&quot;&gt;&lt;a href=&quot;#进程调度的几个思想&quot; class=&quot;headerlink&quot; title=&quot;进程调度的几个思想&quot;&gt;&lt;/a&gt;进程调度的几个思想&lt;/h4&gt;&lt;p&gt;a）优先级：优先处理响应时间要求较短的任务。（多级队列）&lt;br&gt;b）抢占：高优先级任务到来时，暂停正在处理的低优先级任务，先处理高的。&lt;br&gt;c）时间片轮转：各个进程轮流运行一段时间，保证响应时间有&lt;code&gt;上限&lt;/code&gt;。&lt;br&gt;d）反馈：时间片如果不够用，则说明你&lt;code&gt;目前&lt;/code&gt;是CPU繁忙，那下次就给你更长的时间片，更低的优先级。反之，如果用不完你就自己block了，则说明你目前是IO繁忙，下次给你短时间片，更高优先级。&lt;/p&gt;
&lt;p&gt;「为什么一般优先处理IO繁忙进程？」：为了让IO和CPU资源有效并发工作。&lt;/p&gt;
&lt;h4 id=&quot;进程间通信&quot;&gt;&lt;a href=&quot;#进程间通信&quot; class=&quot;headerlink&quot; title=&quot;进程间通信&quot;&gt;&lt;/a&gt;进程间通信&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;同步互斥（信号量）&lt;/li&gt;
&lt;li&gt;管道&lt;/li&gt;
&lt;li&gt;共享内存&lt;/li&gt;
&lt;li&gt;进程间消息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;「什么是&lt;code&gt;临界区&lt;/code&gt;」：访问共享资源的一段&lt;code&gt;代码&lt;/code&gt;。&lt;br&gt;「PV操作解决竟态问题的关键在哪里？」：1.原语不可被打断（捆绑了加锁和访问计数器的操作）。2.等待时自动阻塞，释放CPU。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;内存管理&quot;&gt;&lt;a href=&quot;#内存管理&quot; class=&quot;headerlink&quot; title=&quot;内存管理&quot;&gt;&lt;/a&gt;内存管理&lt;/h4&gt;&lt;p&gt;_&lt;/p&gt;
&lt;h5 id=&quot;内存分页&quot;&gt;&lt;a href=&quot;#内存分页&quot; class=&quot;headerlink&quot; title=&quot;内存分页&quot;&gt;&lt;/a&gt;内存分页&lt;/h5&gt;&lt;p&gt;「目的」：解决内存分配的&lt;code&gt;碎片&lt;/code&gt;问题。分页后碎片平均为页面大小的50%。&lt;br&gt;「为啥页面的大小一般是2的幂次？」：方便通过内存地址计算页面号。&lt;br&gt;「为啥要有页表？」：实现虚地址和物理地址的映射。&lt;br&gt;「为啥要有快表TLB？」：&lt;code&gt;页表存放在内存里&lt;/code&gt;（PCB中），所以每次访问一个内存地址，实际上要读两次内存，这是无法忍受的。TLB是一个硬件，相当于页表的Cache。&lt;br&gt;「为啥要有多级页表？」：虚地址空间好大，于是页表好大。然而那么多的地址空间，对于单个进程来说，大多数是空的。多级页表可以只把用到的页表加载到PCB中，控制页表的大小。当然也会增加页表的访问次数。另外，多级页表中，项目的数量应当也是2的幂次，方便根据地址高位查找。&lt;/p&gt;
&lt;h5 id=&quot;虚拟内存&quot;&gt;&lt;a href=&quot;#虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;虚拟内存&quot;&gt;&lt;/a&gt;虚拟内存&lt;/h5&gt;&lt;p&gt;「理论基础」：程序的局部性原理。&lt;br&gt;「什么是Belady现象？」：分配给进程的物理页面增加时，它的缺页率反而提高的现象。&lt;br&gt;「影响缺页率的因素」：1）页面替换算法。2）配给的页面数。3）编程方式。&lt;br&gt;「页面分配策略」：a）固定分配：配给进程的物理页面数量恒定。b）可变分配：缺页率较低的进程可以让出物理页面给需要的进程。&lt;/p&gt;
&lt;h5 id=&quot;内存分段&quot;&gt;&lt;a href=&quot;#内存分段&quot; class=&quot;headerlink&quot; title=&quot;内存分段&quot;&gt;&lt;/a&gt;内存分段&lt;/h5&gt;&lt;p&gt;「目的」：程序实际上是有结构的，如代码段、堆栈等。按照进程的结构区分内存区块，有利于动态加载以及共享。&lt;br&gt;「段页式内存分配」：先分段，段内再分页。先查段表，再查页表。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;文件系统&quot;&gt;&lt;a href=&quot;#文件系统&quot; class=&quot;headerlink&quot; title=&quot;文件系统&quot;&gt;&lt;/a&gt;文件系统&lt;/h4&gt;&lt;p&gt;_&lt;/p&gt;
&lt;h5 id=&quot;存放方式&quot;&gt;&lt;a href=&quot;#存放方式&quot; class=&quot;headerlink&quot; title=&quot;存放方式&quot;&gt;&lt;/a&gt;存放方式&lt;/h5&gt;&lt;p&gt;a）链表存放—FAT表，一种&lt;code&gt;静态链表&lt;/code&gt;。知道首块地址就能依次查找到最后。&lt;br&gt;b）索引存放—iNode节点。所有块的地址都写在这个node里。&lt;br&gt;「为何要有二级索引？」iNode大小有限（磁盘区块大小），于是存储的索引项目有限，需要用二级索引扩容。&lt;/p&gt;
&lt;h5 id=&quot;空闲区块管理&quot;&gt;&lt;a href=&quot;#空闲区块管理&quot; class=&quot;headerlink&quot; title=&quot;空闲区块管理&quot;&gt;&lt;/a&gt;空闲区块管理&lt;/h5&gt;&lt;p&gt;a）bit-map&lt;br&gt;b）把所有空闲块号组成一个链表&lt;/p&gt;
&lt;h5 id=&quot;二进制打开文件和ASCII打开文件的区别？&quot;&gt;&lt;a href=&quot;#二进制打开文件和ASCII打开文件的区别？&quot; class=&quot;headerlink&quot; title=&quot;二进制打开文件和ASCII打开文件的区别？&quot;&gt;&lt;/a&gt;二进制打开文件和ASCII打开文件的区别？&lt;/h5&gt;&lt;p&gt;ASCII打开时会去辨认&lt;code&gt;换行符&lt;/code&gt;（Win是&lt;code&gt;\r\n&lt;/code&gt;，Linux是&lt;code&gt;\n&lt;/code&gt;，Mac是&lt;code&gt;\r&lt;/code&gt;），可以&lt;code&gt;按行读取&lt;/code&gt;。二进制打开则只能按字节读取，速度比较快。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;考研的时候操作系统是学得最好的一门课，看这本书主要是拾遗补缺。&lt;/p&gt;
    
    </summary>
    
      <category term="basic theory" scheme="http://Rocklu.me/categories/basic-theory/"/>
    
    
  </entry>
  
  <entry>
    <title>关于git的push方式</title>
    <link href="http://Rocklu.me/2015/08/25/git%E7%9A%84push%E6%96%B9%E5%BC%8F/"/>
    <id>http://Rocklu.me/2015/08/25/git的push方式/</id>
    <published>2015-08-25T01:17:00.000Z</published>
    <updated>2016-03-29T09:38:08.000Z</updated>
    
    <content type="html">&lt;p&gt;装完cocopods以后，突然发现push到github的时候每次都要输入用户名和密码，烦得不行。查了一下，是push的方式被改成&lt;code&gt;https&lt;/code&gt;了，原来是&lt;code&gt;ssh&lt;/code&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在terminal里面输入：&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;得到结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;origin&lt;/span&gt; https://github.com/yuquan0821/&lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;.git (fetch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;origin&lt;/span&gt; https://github.com/yuquan0821/&lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;.git (&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;看到里面的https了吗？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;下面的命令把&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;方式改成ssh：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote rm &lt;span class=&quot;built_in&quot;&gt;origin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add &lt;span class=&quot;built_in&quot;&gt;origin&lt;/span&gt; git@github.com:yuquan0821/&lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;装完cocopods以后，突然发现push到github的时候每次都要输入用户名和密码，烦得不行。查了一下，是push的方式被改成&lt;code&gt;https&lt;/code&gt;了，原来是&lt;code&gt;ssh&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="TOOLs" scheme="http://Rocklu.me/categories/TOOLs/"/>
    
    
  </entry>
  
  <entry>
    <title>ipa重签名</title>
    <link href="http://Rocklu.me/2015/08/23/ipa%E9%87%8D%E7%AD%BE%E5%90%8D/"/>
    <id>http://Rocklu.me/2015/08/23/ipa重签名/</id>
    <published>2015-08-22T19:05:00.000Z</published>
    <updated>2016-03-29T09:38:16.000Z</updated>
    
    <content type="html">&lt;p&gt;缘由是朋友问我淘宝上买的「双开微信」是不是安全，我就去研究了下bundle改签名的原理。本来以为不就是改个签名嘛，想不到坑很大。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;方法一：手动用codesign命令：&quot;&gt;&lt;a href=&quot;#方法一：手动用codesign命令：&quot; class=&quot;headerlink&quot; title=&quot;方法一：手动用codesign命令：&quot;&gt;&lt;/a&gt;方法一：手动用&lt;code&gt;codesign&lt;/code&gt;命令：&lt;/h4&gt;&lt;p&gt;这条命令是mac电脑默认自带的，格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;codesign -fs &lt;span class=&quot;string&quot;&gt;&quot;iPhone Distribution: Le Lu (99ZNA7BG5M)&quot;&lt;/span&gt; --entitlements ~&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;entitlements.plist ~&lt;span class=&quot;regexp&quot;&gt;/.../&lt;/span&gt;Pastebot1.&lt;span class=&quot;number&quot;&gt;4.2&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/Payload/&lt;/span&gt;Pastebot.app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这条命令可以覆盖原来的签名。&lt;/p&gt;
&lt;p&gt;「注意1」&lt;br&gt;&lt;code&gt;iPhone Distribution: Le Lu (99ZNA7BG5M)&lt;/code&gt;是证书的名字，可在钥匙串工具里面找到证书，然后看里面的&lt;code&gt;commom name&lt;/code&gt;栏目&lt;br&gt;「注意2」&lt;br&gt;这里需要自己制作一个plist文件，命名为&lt;code&gt;entitlements.plist&lt;/code&gt;，文本如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?&lt;/span&gt;xml version=&lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;plist&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;application-identifier&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;SXY7J8MS3P.me.rocklule.test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;com.apple.developer.team-identifier&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;SXY7J8MS3P&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;get-task-allow&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;false&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;keychain-access-groups&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;SXY7J8MS3P.me.rocklule.test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;plist&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中：&lt;code&gt;SXY7J8MS3P.me.rocklule.test&lt;/code&gt;是需要改动的，前面的&lt;code&gt;SXY7J8MS3P&lt;/code&gt;是开发者前缀，可以在钥匙串工具里的证书说明里面查到，后面是包名，注意所有这本的包名要一致。&lt;br&gt;「坑1」：这个文件前面不可以有空格，有了就不行。&lt;br&gt;「坑2」：网上这个文件版本有两种，另一种不好使。。。&lt;/p&gt;
&lt;p&gt;第二步是把&lt;code&gt;xx.mobileprovision&lt;/code&gt;改名为&lt;code&gt;embedded.mobileprovision&lt;/code&gt;放到app目录下。&lt;br&gt;「坑1」名字不可改。&lt;br&gt;「坑2」这个文件有不同的发布版本，&lt;code&gt;必须&lt;/code&gt;是&lt;code&gt;app store&lt;/code&gt;方式。&lt;/p&gt;
&lt;p&gt;完成后用zip命令打包：&lt;br&gt;&lt;code&gt;zip -r xxxx.ipa SORCE_DIER&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;方法二：用iReSign软件&quot;&gt;&lt;a href=&quot;#方法二：用iReSign软件&quot; class=&quot;headerlink&quot; title=&quot;方法二：用iReSign软件&quot;&gt;&lt;/a&gt;方法二：用&lt;code&gt;iReSign&lt;/code&gt;软件&lt;/h4&gt;&lt;p&gt;这个软件在github有链接，直接下载下来用就可以。会自动帮你提取证书的commom name，比较方便。&lt;/p&gt;
&lt;h4 id=&quot;最大的坑&quot;&gt;&lt;a href=&quot;#最大的坑&quot; class=&quot;headerlink&quot; title=&quot;最大的坑&quot;&gt;&lt;/a&gt;最大的坑&lt;/h4&gt;&lt;p&gt;必须要&lt;code&gt;企业证书&lt;/code&gt;重签名的app才能安装，个人证书签完了闪退。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;缘由是朋友问我淘宝上买的「双开微信」是不是安全，我就去研究了下bundle改签名的原理。本来以为不就是改个签名嘛，想不到坑很大。&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://Rocklu.me/categories/IOS/"/>
    
    
  </entry>
  
  <entry>
    <title>JS_CheatSheet</title>
    <link href="http://Rocklu.me/2015/07/09/JS_CheatSheet/"/>
    <id>http://Rocklu.me/2015/07/09/JS_CheatSheet/</id>
    <published>2015-07-08T22:01:00.000Z</published>
    <updated>2016-03-29T09:38:23.000Z</updated>
    
    <content type="html">&lt;p&gt;以下是犀牛书前几章的笔记。基本涵盖了js的主要语言特性，并没有包含高级特性。以后有需要再深入。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;小细节&quot;&gt;&lt;a href=&quot;#小细节&quot; class=&quot;headerlink&quot; title=&quot;小细节&quot;&gt;&lt;/a&gt;小细节&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;js 区分大小写，而html不区分&lt;/li&gt;
&lt;li&gt;js中所有的数字都是IEEE754的&lt;code&gt;64位&lt;/code&gt;浮点数。「注意」浮点数舍入。&lt;/li&gt;
&lt;li&gt;数组下标是&lt;code&gt;32位&lt;/code&gt;无符号整数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;未定义的变量&quot;&gt;&lt;a href=&quot;#未定义的变量&quot; class=&quot;headerlink&quot; title=&quot;未定义的变量&quot;&gt;&lt;/a&gt;未定义的变量&lt;/h4&gt;&lt;p&gt;未定义的变量看上去像全局变量，实际上不是，它被自动生成为全局对象的&lt;code&gt;属性&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;对于字符&quot;&gt;&lt;a href=&quot;#对于字符&quot; class=&quot;headerlink&quot; title=&quot;对于字符&quot;&gt;&lt;/a&gt;对于字符&lt;/h4&gt;&lt;p&gt;采用&lt;code&gt;UTF-16&lt;/code&gt;编码，通常每个字符用16bit表示，超出16bit的不分，则用32个bit表示。对字符变量取&lt;code&gt;.length&lt;/code&gt;时，每16bit为1。即通常一个字符的长度为1，如果该字符超出UTF-16的范围，则长度为2。&lt;br&gt;「另外」js中可以采用&lt;code&gt;\u0008&lt;/code&gt;这样的unicode编码直接表示某字符。&lt;/p&gt;
&lt;h4 id=&quot;包装对象&quot;&gt;&lt;a href=&quot;#包装对象&quot; class=&quot;headerlink&quot; title=&quot;包装对象&quot;&gt;&lt;/a&gt;包装对象&lt;/h4&gt;&lt;p&gt;对于&lt;code&gt;字符串&lt;/code&gt;、&lt;code&gt;数字&lt;/code&gt;、&lt;code&gt;布尔值&lt;/code&gt;三种「原始类型」，在调用其属性或方法时，解释器会调用&lt;code&gt;String()&lt;/code&gt;、&lt;code&gt;Number()&lt;/code&gt;、&lt;code&gt;Boolean()&lt;/code&gt;构造函数，生成一个「临时」的包装对象，然后用这个对象进行属性或方法调用。作用于这个临时对象的操作并不对原来那个值产生影响，需小心。&lt;/p&gt;
&lt;h4 id=&quot;偷懒的类型转化&quot;&gt;&lt;a href=&quot;#偷懒的类型转化&quot; class=&quot;headerlink&quot; title=&quot;偷懒的类型转化&quot;&gt;&lt;/a&gt;偷懒的类型转化&lt;/h4&gt;&lt;p&gt;x + ‘’     =》 转字符串&lt;br&gt;+x   =》 转数字&lt;br&gt;!!x   =》  转布尔值&lt;/p&gt;
&lt;h5 id=&quot;值得注意的类型转化&quot;&gt;&lt;a href=&quot;#值得注意的类型转化&quot; class=&quot;headerlink&quot; title=&quot;值得注意的类型转化&quot;&gt;&lt;/a&gt;值得注意的类型转化&lt;/h5&gt;&lt;p&gt;字符串转布尔：非空串即true&lt;br&gt;字符串转数字：有字母则NaN，空串为0&lt;br&gt;Object转布尔：恒为true&lt;br&gt;Object转数字：恒为NaN&lt;/p&gt;
&lt;h4 id=&quot;对象到原始值的转化&quot;&gt;&lt;a href=&quot;#对象到原始值的转化&quot; class=&quot;headerlink&quot; title=&quot;对象到原始值的转化&quot;&gt;&lt;/a&gt;对象到原始值的转化&lt;/h4&gt;&lt;p&gt;&lt;code&gt;toSting()&lt;/code&gt;转为sting，&lt;code&gt;valueOf()&lt;/code&gt;转为number&lt;br&gt;「注」如果一个对象没有toString方法，或者这个方法无效（原封不动返回对象而不是原始值）。此时解释器会尝试调用valueOf方法，先转成数字，再转成字符串。对于valueOf也是这样，转不动的时候会去尝试调用toString。。。好无奈&lt;/p&gt;
&lt;h4 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h4&gt;&lt;p&gt;没有块级作用域，只有&lt;code&gt;函数作用域&lt;/code&gt;。即在函数内无论何处定义都可用。&lt;br&gt;「变量名提前」，即在同一个作用域内，后面定义的变量前面就能用了。但注意提前的只是&lt;code&gt;声明&lt;/code&gt;，初始化仍然是在后面。&lt;/p&gt;
&lt;h4 id=&quot;作用域链&quot;&gt;&lt;a href=&quot;#作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域链&quot;&gt;&lt;/a&gt;作用域链&lt;/h4&gt;&lt;p&gt;可以调用上一层函数作用域里面的对象。由链表一层一层向上找。&lt;/p&gt;
&lt;p&gt;「具体实现」：作用域链是对象的链表，每个节点代表一个函数作用域。变量的作用域由函数的&lt;code&gt;定义&lt;/code&gt;位置决定，但是只有在在函数&lt;code&gt;执行&lt;/code&gt;时，才会开始拓展作用域链。具体步骤是：创建一个对象，包含这个函数内定义的所有局部变量，然后把这个对象作为链表指向上一个节点（这是由函数的定义位置决定的）。&lt;/p&gt;
&lt;p&gt;再谈「闭包」：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们为什么要用闭包？希望解决的问题是：再次调用函数时，希望能从上一次的状态继续。或者说，希望保存函数的&lt;code&gt;状态&lt;/code&gt;。于是有了方法1:全局变量。缺点：乱，不好维护。于是有了方法2：把状态变量直接挂载到函数上，作为一个属性（函数也是对象）。缺点：缺乏私有的访问限制。于是我们终于有了方法3：闭包。所以闭包解决的问题，只不过是让这个状态变量私有化。&lt;code&gt;松本行弘&lt;/code&gt;认为，闭包与Class都是把函数与变量封装起来，他们的关系就像一个硬币的正反面，只是实现方式不同罢了。&lt;/li&gt;
&lt;li&gt;机理。js与c不同，函数的调用并不在&lt;code&gt;栈空间&lt;/code&gt;，而是创建一个&lt;code&gt;临时对象&lt;/code&gt;存放局部变量。如果没有其他变量引用这个对象，在函数执行完毕后该对象会被垃圾回收。而闭包就是把局部定义的函数返回出去，让外界引用持有，于是整个函数生成的临时对象都会存活下来。&lt;/li&gt;
&lt;li&gt;要注意的有两点：1：由于每次函数执行都会生成一个临时对象，所以那些临时变量间互不干扰，分别处于同级别的&lt;code&gt;不同的&lt;/code&gt;作用域链。2：要时刻注意闭包虽然把变量封闭在函数里面了，但是这些变量并没有固化静态快照。&lt;/li&gt;
&lt;li&gt;现在看来，闭包在功能是为了封装隔离某些函数多次调用时需要保存的状态变量。其实在class机制完全的语言里，只要把那些变量设为private就可以实现，只是js的类机制比较弱，用作用域链实现隔离。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;属性访问表达式&quot;&gt;&lt;a href=&quot;#属性访问表达式&quot; class=&quot;headerlink&quot; title=&quot;属性访问表达式&quot;&gt;&lt;/a&gt;属性访问表达式&lt;/h4&gt;&lt;p&gt;要访问一个对象的属性，可以是点语法，也可以在方括号里面写属性的名称字符串。&lt;br&gt;「注意」方括号里面无论是什么，先转字符串！所以即使是数组下标，也是先把数字转成字符串去查找的。&lt;/p&gt;
&lt;h4 id=&quot;「相等」的判定&quot;&gt;&lt;a href=&quot;#「相等」的判定&quot; class=&quot;headerlink&quot; title=&quot;「相等」的判定&quot;&gt;&lt;/a&gt;「相等」的判定&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;允许类型转化，&lt;code&gt;===&lt;/code&gt;不允许类型转化&lt;/li&gt;
&lt;li&gt;对象的比较，比较的是指针。&lt;/li&gt;
&lt;li&gt;字符串的比较，比较的是unicode码，码不同，即使字符相同也不等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt;与任何值都不相等，它和自己也不等。&lt;/li&gt;
&lt;li&gt;数字与其他类型比较均转化为数字再比较&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;eval-函数&quot;&gt;&lt;a href=&quot;#eval-函数&quot; class=&quot;headerlink&quot; title=&quot;eval()函数&quot;&gt;&lt;/a&gt;eval()函数&lt;/h4&gt;&lt;p&gt;eval函数把参数字符串作为代码来执行，并可调用eval位置的上下文。&lt;br&gt;如果给eval函数取别名，调用别名函数时，则操作全局上下文（局部变量不可见）&lt;/p&gt;
&lt;h4 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h4&gt;&lt;p&gt;switch的行为类似于c语言。「注意」case的判定不做类型转化，即&lt;code&gt;===&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;JS的对象&quot;&gt;&lt;a href=&quot;#JS的对象&quot; class=&quot;headerlink&quot; title=&quot;JS的对象&quot;&gt;&lt;/a&gt;JS的对象&lt;/h4&gt;&lt;p&gt;js的&lt;code&gt;对象&lt;/code&gt;就是&lt;code&gt;「字典」&lt;/code&gt;。&lt;br&gt;js的继承是对象的继承，而不是class的继承。&lt;br&gt;对象的「prototype」就是&lt;code&gt;构造函数&lt;/code&gt;的&lt;code&gt;prototype&lt;/code&gt;属性&lt;br&gt;对象的「class」就是「构造函数」&lt;code&gt;（有待验证）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;「例子」一个数组[1, 2]，Array就是它的类，&lt;code&gt;Array.prototype&lt;/code&gt;就是它的原型。对于数组的各种方法均定义在Array.prototype中。&lt;/p&gt;
&lt;h4 id=&quot;属性的特性（property-attribute）&quot;&gt;&lt;a href=&quot;#属性的特性（property-attribute）&quot; class=&quot;headerlink&quot; title=&quot;属性的特性（property attribute）&quot;&gt;&lt;/a&gt;属性的特性（property attribute）&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;writable&lt;/code&gt;—可写。（可修改）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enumerable&lt;/code&gt;—可枚举。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configurable&lt;/code&gt;—可配置。（就是能否更改这些属性）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;属性的检测&quot;&gt;&lt;a href=&quot;#属性的检测&quot; class=&quot;headerlink&quot; title=&quot;属性的检测&quot;&gt;&lt;/a&gt;属性的检测&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;x.hasOwnProperty()&lt;/code&gt;—检测自有属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;运算符—-检测包括继承的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.propertyIsEnumerable()&lt;/code&gt;—检测可枚举的&lt;code&gt;自有&lt;/code&gt;属性&lt;br&gt;「啥叫可枚举」用for-in遍历对象时，会遍历到的属性就是enumerable的&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;delete运算符&quot;&gt;&lt;a href=&quot;#delete运算符&quot; class=&quot;headerlink&quot; title=&quot;delete运算符&quot;&gt;&lt;/a&gt;delete运算符&lt;/h4&gt;&lt;p&gt;删除对象对属性的&lt;code&gt;引用&lt;/code&gt;。通常可以删除某个属性，但是如果其子属性也被其他对象引用，并不会被立刻销毁。&lt;br&gt;另外，delete不能销毁继承来的属性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object.Keys()&lt;/code&gt;与&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;的区别？&lt;br&gt;第一个会追溯原型链，第二个不会。&lt;/p&gt;
&lt;h4 id=&quot;关于「数组」值得注意的地方&quot;&gt;&lt;a href=&quot;#关于「数组」值得注意的地方&quot; class=&quot;headerlink&quot; title=&quot;关于「数组」值得注意的地方&quot;&gt;&lt;/a&gt;关于「数组」值得注意的地方&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;直接量的语法中，最后一个逗号&lt;code&gt;,&lt;/code&gt;是可以选的。[,]是空数组&lt;/li&gt;
&lt;li&gt;数组的索引是32位整数。&lt;/li&gt;
&lt;li&gt;数组与普通对象的区别？维护一个length，索引为&lt;code&gt;unsigned_int32_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;「省略值」仍旧有key，而value是&lt;code&gt;undefined&lt;/code&gt;。这不代表没有元素。&lt;/li&gt;
&lt;li&gt;for-in不会遍历到省略值的key。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;关于「函数」值得注意的地方&quot;&gt;&lt;a href=&quot;#关于「函数」值得注意的地方&quot; class=&quot;headerlink&quot; title=&quot;关于「函数」值得注意的地方&quot;&gt;&lt;/a&gt;关于「函数」值得注意的地方&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;调用函数时，解释器并不检查传入的参数。&lt;/li&gt;
&lt;li&gt;函数也是&lt;code&gt;对象&lt;/code&gt;，可以有属性，存点状态什么的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;函数的「arguments」属性&quot;&gt;&lt;a href=&quot;#函数的「arguments」属性&quot; class=&quot;headerlink&quot; title=&quot;函数的「arguments」属性&quot;&gt;&lt;/a&gt;函数的「arguments」属性&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;它是一个&lt;code&gt;类数组&lt;/code&gt;（行为看上去像数组），下标访问得到实际传入的参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arguments.length&lt;/code&gt;代表传入的&lt;code&gt;实参&lt;/code&gt;数量，&lt;code&gt;arguments.callee.length&lt;/code&gt;代表函数定义时的&lt;code&gt;形参&lt;/code&gt;数量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callee&lt;/code&gt;属性代表当前函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caller&lt;/code&gt;属性代表调用本函数的函数&lt;/li&gt;
&lt;li&gt;「注意」callee和caller在&lt;code&gt;严格模式&lt;/code&gt;下不可用。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;以下是犀牛书前几章的笔记。基本涵盖了js的主要语言特性，并没有包含高级特性。以后有需要再深入。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://Rocklu.me/categories/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>IOS开发笔记</title>
    <link href="http://Rocklu.me/2015/05/27/IOS%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://Rocklu.me/2015/05/27/IOS开发笔记/</id>
    <published>2015-05-27T08:01:00.000Z</published>
    <updated>2016-03-29T09:38:30.000Z</updated>
    
    <content type="html">&lt;p&gt;IOS开发已经搞了两个月，积累了一些经验。详实记录，以供查阅。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;调用OC的代码&quot;&gt;&lt;a href=&quot;#调用OC的代码&quot; class=&quot;headerlink&quot; title=&quot;调用OC的代码&quot;&gt;&lt;/a&gt;调用OC的代码&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;需要建立一个&lt;code&gt;bridging-header.h&lt;/code&gt;（本来好像会自动建立，现在需要手动建立了，名字无所谓）&lt;/li&gt;
&lt;li&gt;在项目的&lt;code&gt;Build Settings&lt;/code&gt;里面搜索swift，可以看到&lt;code&gt;Swift Compiler - Code Generation&lt;/code&gt;大栏目，里面有&lt;code&gt;Objective-C Bridging Header&lt;/code&gt;，把刚刚建立的头文件名字放进去就ok&lt;/li&gt;
&lt;li&gt;然后，所有的oc头文件只要包含在这个桥文件里面，就自动在所有的swift文件里面可以使用了。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&quot;如何创建一个View&quot;&gt;&lt;a href=&quot;#如何创建一个View&quot; class=&quot;headerlink&quot; title=&quot;如何创建一个View&quot;&gt;&lt;/a&gt;如何创建一个View&lt;/h4&gt;&lt;p&gt;总体来说，如果这个View只管展示，不需要交互，可以直接创建一个裸的UIView。否则就创建一个UIViewController，会自带一个View。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法一：通过storyBoard&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有入口箭头的Controller会默认加载，如果找不到箭头了，请在controller属性里面找&lt;code&gt;Is Initial View Controller&lt;/code&gt;把它勾上&lt;/li&gt;
&lt;li&gt;对于segue指向的controller也是会自动加载&lt;/li&gt;
&lt;li&gt;对于无法用segue连线的单独controller也可以放在storyboard中，此时先通过代码加载storyboard，然后通过唯一的&lt;code&gt;Storyboard ID&lt;/code&gt;加载这个controller。&lt;br&gt;示例代码：&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; storyBoard = &lt;span class=&quot;type&quot;&gt;UIStoryboard&lt;/span&gt;(name: &lt;span class=&quot;string&quot;&gt;&quot;Main&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;//先加载storyboard对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; chat = storyBoard.instantiateViewControllerWithIdentifier(&lt;span class=&quot;string&quot;&gt;&quot;inquiry&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;InquiryChatTableViewController&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;//再加载controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;方法二：通过xib&lt;/strong&gt;&lt;br&gt;类似于从storyBoard，优点是多个view可以放在单独的文件里，归类。&lt;br&gt;示例代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nib = &lt;span class=&quot;type&quot;&gt;UINib&lt;/span&gt;(nibName: &lt;span class=&quot;string&quot;&gt;&quot;TabBarView&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//记得设置xib控件里面的class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; newTabBar = nib.instantiateWithOwner(&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, options: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;MyTabBar&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//注意实例化后返回的是数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;方法三：通过代码new&lt;/strong&gt;&lt;br&gt;我碰到大概有这几种情况需要自己new&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;界面布局需要动态计算&lt;/li&gt;
&lt;li&gt;需要一次性循环生成多个view&lt;/li&gt;
&lt;li&gt;布局太简单没有什么子控件&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&quot;自定义控件的若干经验&quot;&gt;&lt;a href=&quot;#自定义控件的若干经验&quot; class=&quot;headerlink&quot; title=&quot;自定义控件的若干经验&quot;&gt;&lt;/a&gt;自定义控件的若干经验&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;基本思路是创建一个新类继承自默认类，然后对需要改动的方法进行override。&lt;/li&gt;
&lt;li&gt;自定义的view如果需要交互，一般设置一个委托delegate属性，配套一个协议protocol定义好调用的函数，然后把外部的controller设置为它的委托，让view持有引用（weak）。事件发生时，view通过调用委托在协议中定义好的方法把事件传递给外部的controller。&lt;/li&gt;
&lt;li&gt;自定义控件如果布局复杂，通常会搞一个xib，把控件的class设置为自定义的view。&lt;/li&gt;
&lt;li&gt;从xib连线到view的&lt;code&gt;@IBOutlet&lt;/code&gt;什么时候生效？ 这个需要详细查询view的生命周期，总之记住，在init()里面它们还为被设置，此时这些@IBOutlet的属性还均是nil。一个比较合适的方法是用swift的新功能&lt;code&gt;didSet&lt;/code&gt;，在didset里面对这些属性进行配置。&lt;/li&gt;
&lt;li&gt;对于需要用代码创建的子控件，可以放在init函数里面。此时处理事件就要&lt;code&gt;addTarget&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果你的控件看不见……检查下以下方面：1，frame，2，是否加入主view的subView，3，alpha&lt;/li&gt;
&lt;li&gt;当控件的frame变化时，会调用&lt;code&gt;layoutSubviews&lt;/code&gt;，所以在这里面设置subView的frame最合适。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&quot;关于启动页图片&quot;&gt;&lt;a href=&quot;#关于启动页图片&quot; class=&quot;headerlink&quot; title=&quot;关于启动页图片&quot;&gt;&lt;/a&gt;关于启动页图片&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;图片命名为：&lt;code&gt;Default@2x.png&lt;/code&gt;和&lt;code&gt;Default-568h@2x.png&lt;/code&gt;放入项目&lt;/li&gt;
&lt;li&gt;把[项目设置]中，&lt;code&gt;launch screen file&lt;/code&gt;设置为&lt;code&gt;空&lt;/code&gt;即可自动调用&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&quot;UIButton专题&quot;&gt;&lt;a href=&quot;#UIButton专题&quot; class=&quot;headerlink&quot; title=&quot;UIButton专题&quot;&gt;&lt;/a&gt;UIButton专题&lt;/h4&gt;&lt;p&gt;_&lt;/p&gt;
&lt;h5 id=&quot;各种属性设置&quot;&gt;&lt;a href=&quot;#各种属性设置&quot; class=&quot;headerlink&quot; title=&quot;各种属性设置&quot;&gt;&lt;/a&gt;各种属性设置&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; btn = &lt;span class=&quot;type&quot;&gt;UIButton&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.frame = &lt;span class=&quot;type&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.addSubview(btn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这些圆角的设定也适合于UIView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.layer.cornerRadius = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.layer.borderColor = mixiColor.mainCoffie.&lt;span class=&quot;type&quot;&gt;CGColor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.layer.borderWidth = &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.layer.masksToBounds = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//如果里面的子view多出来，就切掉&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//文字相关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.setTitle(‘title&#39;, forState: &lt;span class=&quot;type&quot;&gt;UIControlState&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Normal&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.titleLabel?.font = &lt;span class=&quot;type&quot;&gt;UIFont&lt;/span&gt;.systemFontOfSize(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.setTitleColor(mixiColor.mainCoffie, forState: &lt;span class=&quot;type&quot;&gt;UIControlState&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Normal&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.setTitleColor(mixiColor.mainCoffie, forState: &lt;span class=&quot;type&quot;&gt;UIControlState&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Highlighted&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.setTitleColor(&lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.whiteColor(), forState: &lt;span class=&quot;type&quot;&gt;UIControlState&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Selected&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//背景颜色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.setBackgroundImage(buttonImage, forState: &lt;span class=&quot;type&quot;&gt;UIControlState&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Selected&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.backgroundColor = mixiColor.mainCoffie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.addTarget(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, action:&lt;span class=&quot;type&quot;&gt;Selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;distrectBtnPressed:&quot;&lt;/span&gt;), forControlEvents: &lt;span class=&quot;type&quot;&gt;UIControlEvents&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;TouchUpInside&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;按钮中图片和文字的位置怎么调？&quot;&gt;&lt;a href=&quot;#按钮中图片和文字的位置怎么调？&quot; class=&quot;headerlink&quot; title=&quot;按钮中图片和文字的位置怎么调？&quot;&gt;&lt;/a&gt;按钮中图片和文字的位置怎么调？&lt;/h5&gt;&lt;p&gt;调整对齐方式：属性-&amp;gt;Control-&amp;gt;Alignment&lt;br&gt;调整padding：属性-&amp;gt;Button栏最下面-&amp;gt;Edge选文字还是图片-&amp;gt;Inset&lt;br&gt;想图片在上文字在下：重写layoutSubviews方法。&lt;/p&gt;
&lt;h5 id=&quot;如何让按钮按下去的时候不变色&quot;&gt;&lt;a href=&quot;#如何让按钮按下去的时候不变色&quot; class=&quot;headerlink&quot; title=&quot;如何让按钮按下去的时候不变色&quot;&gt;&lt;/a&gt;如何让按钮按下去的时候不变色&lt;/h5&gt;&lt;p&gt;&lt;code&gt;btn.adjustsImageWhenHighlighted = false&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;如何让按钮不能点&quot;&gt;&lt;a href=&quot;#如何让按钮不能点&quot; class=&quot;headerlink&quot; title=&quot;如何让按钮不能点&quot;&gt;&lt;/a&gt;如何让按钮不能点&lt;/h5&gt;&lt;p&gt;&lt;code&gt;btn.userInterractionEnabled = false&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;素材图片的拉伸&quot;&gt;&lt;a href=&quot;#素材图片的拉伸&quot; class=&quot;headerlink&quot; title=&quot;素材图片的拉伸&quot;&gt;&lt;/a&gt;素材图片的拉伸&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIImage&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resizabelImage&lt;/span&gt;(#&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt; :&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;) -&amp;gt;&lt;span class=&quot;title&quot;&gt;UIImage&lt;/span&gt;?&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; normalImage = &lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt;(named: name)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; w = &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt;(normalImage.size.width * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; h = &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt;(normalImage.size.width * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; normalImage.resizableImageWithCapInsets(&lt;span class=&quot;type&quot;&gt;UIEdgeInsets&lt;/span&gt;(top: h, &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;: w, bottom: h, &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;: w))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h4 id=&quot;控制键盘&quot;&gt;&lt;a href=&quot;#控制键盘&quot; class=&quot;headerlink&quot; title=&quot;控制键盘&quot;&gt;&lt;/a&gt;控制键盘&lt;/h4&gt;&lt;p&gt;_&lt;/p&gt;
&lt;h5 id=&quot;关闭键盘&quot;&gt;&lt;a href=&quot;#关闭键盘&quot; class=&quot;headerlink&quot; title=&quot;关闭键盘&quot;&gt;&lt;/a&gt;关闭键盘&lt;/h5&gt;&lt;p&gt;&lt;code&gt;self.view.endEditing(true)&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;触摸任意区域关闭键盘&quot;&gt;&lt;a href=&quot;#触摸任意区域关闭键盘&quot; class=&quot;headerlink&quot; title=&quot;触摸任意区域关闭键盘&quot;&gt;&lt;/a&gt;触摸任意区域关闭键盘&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tapGestureRecognizer:&lt;span class=&quot;type&quot;&gt;UITapGestureRecognizer&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;UITapGestureRecognizer&lt;/span&gt;(target: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, action: &lt;span class=&quot;string&quot;&gt;&quot;keyboardHide&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//为啥要加下面这行？答：不加的话里面的view的按钮会点不动。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//参考：http://blog.csdn.net/kylinbl/article/details/9139473&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tapGestureRecognizer.cancelsTouchesInView = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.addGestureRecognizer(tapGestureRecognizer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;监听键盘弹出事件&quot;&gt;&lt;a href=&quot;#监听键盘弹出事件&quot; class=&quot;headerlink&quot; title=&quot;监听键盘弹出事件&quot;&gt;&lt;/a&gt;监听键盘弹出事件&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这里是viewDidLoad里面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;NSNotificationCenter&lt;/span&gt;.defaultCenter().addObserver(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, selector: &lt;span class=&quot;type&quot;&gt;Selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;keyboardWillChangeFrame&quot;&lt;/span&gt;), name: &lt;span class=&quot;string&quot;&gt;&quot;UIKeyboardWillChangeFrameNotification&quot;&lt;/span&gt;, object: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这里是controller的class里面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//弹出键盘时同时向上滚动view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;keyboardWillChangeFrame&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(note :NSNotification)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; shift :&lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; userInfo = note.userInfo!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; keyboardFrame = userInfo[&lt;span class=&quot;type&quot;&gt;UIKeyboardFrameEndUserInfoKey&lt;/span&gt;]?.&lt;span class=&quot;type&quot;&gt;CGRectValue&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; transformY = keyboardFrame!.origin.y - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.frame.size.height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; duration = userInfo[&lt;span class=&quot;type&quot;&gt;UIKeyboardAnimationDurationUserInfoKey&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(duration, animations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, transformY + shift)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这里是controller的class里面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//记得给controller写deinit，移除消息通知监听(必须)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;deinit&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;NSNotificationCenter&lt;/span&gt;.defaultCenter().removeObserver(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;呼出键盘&quot;&gt;&lt;a href=&quot;#呼出键盘&quot; class=&quot;headerlink&quot; title=&quot;呼出键盘&quot;&gt;&lt;/a&gt;呼出键盘&lt;/h5&gt;&lt;p&gt;&lt;code&gt;textField对象.becomeFirstResponder()&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;界面跳转&quot;&gt;&lt;a href=&quot;#界面跳转&quot; class=&quot;headerlink&quot; title=&quot;界面跳转&quot;&gt;&lt;/a&gt;界面跳转&lt;/h4&gt;&lt;p&gt;在segue的prepare中不要直接去更新目标页面控件，而是把数据传给它的module，因为此时outlet还没有设置。然后在viewdidload中，用更新好的module来设置UI。&lt;/p&gt;
&lt;p&gt;往回跳&lt;br&gt;self.navigationController?.popToRootViewControllerAnimated(true)&lt;br&gt;self.navigationController?.popViewControllerAnimated(true)&lt;/p&gt;
&lt;p&gt;数据怎么回传？&lt;br&gt;前面那个controller成为后面那个的代理（搞个协议），让后面那个持有前面那个的指针，然后就可以传参数调用前面那个controller的函数了&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;UITabbarController的自定义经验&quot;&gt;&lt;a href=&quot;#UITabbarController的自定义经验&quot; class=&quot;headerlink&quot; title=&quot;UITabbarController的自定义经验&quot;&gt;&lt;/a&gt;UITabbarController的自定义经验&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;重写viewWillAppear()，在里面直接self.tabBar.removeFromSuperview()。&lt;/li&gt;
&lt;li&gt;把自定义的tabBar放到原来tabBar的位置（直接copy它的frame）&lt;/li&gt;
&lt;li&gt;对于点击事件，UITabbarController作为自定义tabbar的委托，调用&lt;code&gt;self.selectedIndex = 下标数字&lt;/code&gt;即可切换子controller&lt;/li&gt;
&lt;li&gt;添加子controller的方法：&lt;code&gt;self.addChildViewController(子controller)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&quot;UINavigationController的配置经验&quot;&gt;&lt;a href=&quot;#UINavigationController的配置经验&quot; class=&quot;headerlink&quot; title=&quot;UINavigationController的配置经验&quot;&gt;&lt;/a&gt;UINavigationController的配置经验&lt;/h4&gt;&lt;p&gt;这个导航条蛮搞的，UINavigationController不但提供view的容器，还提供bar的容器。&lt;/p&gt;
&lt;h5 id=&quot;哪些是由UINavigationController管的&quot;&gt;&lt;a href=&quot;#哪些是由UINavigationController管的&quot; class=&quot;headerlink&quot; title=&quot;哪些是由UINavigationController管的&quot;&gt;&lt;/a&gt;哪些是由UINavigationController管的&lt;/h5&gt;&lt;p&gt;主要是格式类的配置，大概是希望一次性设置不用每个子controller再设置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bar的&lt;code&gt;背景染色&lt;/code&gt;(navi.navigationBar.&lt;code&gt;barTintColor&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;bar上title的&lt;code&gt;文字属性&lt;/code&gt;titleTextAttributes。包括颜色、字体、阴影等。&lt;/li&gt;
&lt;li&gt;bar上的&lt;code&gt;item染色&lt;/code&gt;tintColor&lt;/li&gt;
&lt;li&gt;bar的特性，比如&lt;code&gt;navi.hidesBarsOnSwipe = true&lt;/code&gt;，向上滑动时自动收起bar&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;哪些是由子controller管的配置&quot;&gt;&lt;a href=&quot;#哪些是由子controller管的配置&quot; class=&quot;headerlink&quot; title=&quot;哪些是由子controller管的配置&quot;&gt;&lt;/a&gt;哪些是由子controller管的配置&lt;/h5&gt;&lt;p&gt;内容性的配置，主要由一个navigationItem存储这些内容。（相当于一个module）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左边和右边的barItem（self.navigationItem.leftBarButtonItem）&lt;/li&gt;
&lt;li&gt;bar上面的title文字内容（self.navigationItem.title）&lt;br&gt;「注」&lt;code&gt;self.navigationController&lt;/code&gt;得到的就是上面那个UINavigationController&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;如何干掉默认的返回键文字&quot;&gt;&lt;a href=&quot;#如何干掉默认的返回键文字&quot; class=&quot;headerlink&quot; title=&quot;如何干掉默认的返回键文字&quot;&gt;&lt;/a&gt;如何干掉默认的返回键文字&lt;/h5&gt;&lt;p&gt;左上角默认会把上一个controller的title写在那里，处理起来很不方便。有一个很机智的做法：重写上一个controller的&lt;code&gt;viewWillAppear&lt;/code&gt;和&lt;code&gt;viewWillDisappear&lt;/code&gt;，将要出现的时候加上title，将要消失的时候就把title设置为空。这样，push到下一个controller的时候返回键那里显示就是空拉~&lt;/p&gt;
&lt;h5 id=&quot;如何设置barItem的位置？&quot;&gt;&lt;a href=&quot;#如何设置barItem的位置？&quot; class=&quot;headerlink&quot; title=&quot;如何设置barItem的位置？&quot;&gt;&lt;/a&gt;如何设置barItem的位置？&lt;/h5&gt;&lt;p&gt;&lt;code&gt;self.navigationItem.leftBarButtonItem?.imageInsets = UIEdgeInsets(...)&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;如何截获controller的pop？&quot;&gt;&lt;a href=&quot;#如何截获controller的pop？&quot; class=&quot;headerlink&quot; title=&quot;如何截获controller的pop？&quot;&gt;&lt;/a&gt;如何截获controller的pop？&lt;/h5&gt;&lt;p&gt;重写&lt;code&gt;popViewControllerAnimated(...)&lt;/code&gt;方法，可以在pop前自定义操作，甚至可以指定pop至的controller。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;UITableViewController的配置经验&quot;&gt;&lt;a href=&quot;#UITableViewController的配置经验&quot; class=&quot;headerlink&quot; title=&quot;UITableViewController的配置经验&quot;&gt;&lt;/a&gt;UITableViewController的配置经验&lt;/h4&gt;&lt;p&gt;这个contorller强制你整个view都是tableview，不能加点别的东西，比较死，一般不用。通常是在一个默认的UIViewController里面拖一个tableView进去，设置一下delegation和dataSource。&lt;/p&gt;
&lt;h5 id=&quot;为什么看不到cell？&quot;&gt;&lt;a href=&quot;#为什么看不到cell？&quot; class=&quot;headerlink&quot; title=&quot;为什么看不到cell？&quot;&gt;&lt;/a&gt;为什么看不到cell？&lt;/h5&gt;&lt;p&gt;记得写这俩函数：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numberOfSectionsInTableView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;//返回table的组数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(..., numberOfRowsInSection ...)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;//返回table的行数，告诉controller每组一共几行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(..., cellForRowAtIndexPath ...)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cell = tableView.dequeueReusableCellWithIdentifier(&lt;span class=&quot;string&quot;&gt;&quot;DaRenCell&quot;&lt;/span&gt;, forIndexPath: indexPath) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;DaRenTableViewCell&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;//DaRenCell是Prototype cell的id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell         &lt;span class=&quot;comment&quot;&gt;//返回一个cell对象，告诉controller每一行显示啥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;自动调整的row-height&quot;&gt;&lt;a href=&quot;#自动调整的row-height&quot; class=&quot;headerlink&quot; title=&quot;自动调整的row height&quot;&gt;&lt;/a&gt;自动调整的row height&lt;/h5&gt;&lt;p&gt;如果cell里面的控件全都使用autoLayout，则可以让系统自己自动调整行高。在controller中做一下配置即可：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tableView.estimatedRowHeight = tableView.rowHeight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tableView.rowHeight = &lt;span class=&quot;type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;数据重载&quot;&gt;&lt;a href=&quot;#数据重载&quot; class=&quot;headerlink&quot; title=&quot;数据重载&quot;&gt;&lt;/a&gt;数据重载&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//重载整个table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.reloadData()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//重载单个cell并带动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.reloadRowsAtIndexPaths([&lt;span class=&quot;type&quot;&gt;NSIndexPath&lt;/span&gt;(forRow: rowNmuber, inSection: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)] , withRowAnimation: &lt;span class=&quot;type&quot;&gt;UITableViewRowAnimation&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Automatic&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;滚动到指定的位置&quot;&gt;&lt;a href=&quot;#滚动到指定的位置&quot; class=&quot;headerlink&quot; title=&quot;滚动到指定的位置&quot;&gt;&lt;/a&gt;滚动到指定的位置&lt;/h5&gt;&lt;p&gt;没仔细研究，总觉的这个方法有时有行有时候不行：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.scrollToRowAtIndexPath(&lt;span class=&quot;type&quot;&gt;NSIndexPath&lt;/span&gt;(forRow: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.chatData.data.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, inSection: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), atScrollPosition: &lt;span class=&quot;type&quot;&gt;UITableViewScrollPosition&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Bottom&lt;/span&gt;, animated: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;滚动的检测&quot;&gt;&lt;a href=&quot;#滚动的检测&quot; class=&quot;headerlink&quot; title=&quot;滚动的检测&quot;&gt;&lt;/a&gt;滚动的检测&lt;/h5&gt;&lt;p&gt;tableView继承自scrollView，所以会调用&lt;code&gt;scrollViewDidScroll()&lt;/code&gt;方法&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这段让上面的bar在tableview向上滚动时自动收起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mainSearchBar: &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastOffSet :&lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; accumulate :&lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//累计判断正负，以防变化太快&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//监听tableview的滑动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;scrollViewDidScroll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(scrollView: UIScrollView)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    accumulate += scrollView.contentOffset.y - lastOffSet   &lt;span class=&quot;comment&quot;&gt;//累计混动的距离，向上增加，向下减少&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(accumulate &amp;gt; &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;)&amp;#123;           &lt;span class=&quot;comment&quot;&gt;//150的阈值比较合适&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accumulate = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这里代码让bar向上滑动，以隐藏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(accumulate &amp;lt; -&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&amp;#123;      &lt;span class=&quot;comment&quot;&gt;//恢复的阈值设置的较低&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accumulate = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这里代码让bar恢复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lastOffSet = scrollView.contentOffset.y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h4 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h4&gt;&lt;p&gt;动画有两个比较常用，一个带结束后步骤，一个不带。&lt;br&gt;「注意」同一个线程里，虽然你可以不等前面那个结束就开始下一个动画，但并不会并发。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, animations: &amp;#123;[&lt;span class=&quot;keyword&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bookDateView.alpha = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;//满满变透明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, completion: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#123;      &lt;span class=&quot;comment&quot;&gt;//这个$0是匿名函数必须的，代表动画是否成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;MBProgressHUD&lt;/span&gt;.showHUDAddedTo(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view, animated: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这个简单版本不带completion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(&lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;, animations: &amp;#123;[&lt;span class=&quot;keyword&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bookSucceedView.alpha = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//注意这里[unowned self] 意思是闭包中不要捕获self，以防循环引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h4&gt;&lt;p&gt;并没有深入研究，保存了一点有用的代码：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; qos = &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;( &lt;span class=&quot;type&quot;&gt;QOS_CLASS_USER_INTERACTIVE&lt;/span&gt;.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; queue = dispatch_get_global_queue(qos, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(queue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_async(dispatch_get_main_queue()) &amp;#123;   &lt;span class=&quot;comment&quot;&gt;//UI相关的动作必须切换到主线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.reloadData()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;折纸效果的侧滑栏实现&quot;&gt;&lt;a href=&quot;#折纸效果的侧滑栏实现&quot; class=&quot;headerlink&quot; title=&quot;折纸效果的侧滑栏实现&quot;&gt;&lt;/a&gt;折纸效果的侧滑栏实现&lt;/h4&gt;&lt;p&gt;滑动时侧边栏跟着移动并带渐变阴影，滑动时根据力度决定是否划开。&lt;br&gt;这段代码我记得写了整整一天，调了无数bug，做到了较好的体验。&lt;br&gt;并没有办法重现当时的神勇，直接保留代码。。。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  SlideViewController.swift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Created by LuRock on 15/3/22.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Copyright (c) 2015年 LuRock. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//侧滑栏的宽度比例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SLIDERATE&lt;/span&gt; :&lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;leftBarButtunDelegate&lt;/span&gt; :&lt;span class=&quot;title&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&amp;#123;      &lt;span class=&quot;comment&quot;&gt;//class关键字可以让这个协议使用weak指针，原因待查&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;leftBarButtunClicked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SlideViewController&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;leftBarButtunDelegate&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;SlideBarViewDelegate&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slideBar :&lt;span class=&quot;type&quot;&gt;SlideBarViewController&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//存放所有可以被侧滑拦切换出来的viewcontroller。字典，key是view的名字，如“个人中心”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mainviewController = [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;:&lt;span class=&quot;type&quot;&gt;UIViewController&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//标记活动的controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; activeMainViewControler :&lt;span class=&quot;type&quot;&gt;UIViewController&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//用来记录侧滑手势的上一个偏移值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastX :&lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这里从storyboard读取并实例化侧边栏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; storyboard = &lt;span class=&quot;type&quot;&gt;UIStoryboard&lt;/span&gt;(name: &lt;span class=&quot;string&quot;&gt;&quot;Main&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar = storyboard.instantiateViewControllerWithIdentifier(&lt;span class=&quot;string&quot;&gt;&quot;SlideBar&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;SlideBarViewController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//设置侧边栏的frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar.view.frame = &lt;span class=&quot;type&quot;&gt;CGRect&lt;/span&gt;(x: -&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.frame.width * &lt;span class=&quot;type&quot;&gt;SLIDERATE&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;0.25&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, width: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.frame.width * &lt;span class=&quot;type&quot;&gt;SLIDERATE&lt;/span&gt;, height: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.frame.height)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//先加到数组里面的view会在下面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addChildViewController(slideBar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.addSubview(slideBar.view)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.sendSubviewToBack(slideBar.view)   &lt;span class=&quot;comment&quot;&gt;//这句可以把某个view弄到最底下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//实例化子controller，设置它们的delegation，放置到mainviewController字典里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setUpMainViewController()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;comment&quot;&gt;//viewDidLoad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这是个proxy，是为了统一化侧滑栏的阴影和移动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slideBarTransform :&lt;span class=&quot;type&quot;&gt;CGAffineTransform&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;didSet&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar.view.transform = slideBarTransform&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar.shadow.alpha = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - slideBarTransform.tx / (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar.view.frame.width * &lt;span class=&quot;type&quot;&gt;SLIDERATE&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//translation不是翻译的意思，意思是“移动量”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;didDrag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pan:UIPanGestureRecognizer)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; point = pan.translationInView(pan.view!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; slideBarWidth = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar.view.frame.width&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; duration = &lt;span class=&quot;number&quot;&gt;0.25&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; viewFrameMinX = pan.view?.frame.minX&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pan.state == &lt;span class=&quot;type&quot;&gt;UIGestureRecognizerState&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Changed&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//这里记录上次的位置，以确定拖拽方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.lastX = viewFrameMinX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 结束拖拽&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pan.state == &lt;span class=&quot;type&quot;&gt;UIGestureRecognizerState&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Cancelled&lt;/span&gt; || pan.state == &lt;span class=&quot;type&quot;&gt;UIGestureRecognizerState&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Ended&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(viewFrameMinX &amp;gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.lastX)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//如果向右拖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (viewFrameMinX &amp;gt;= slideBarWidth * &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 往右边至少走动了五分之一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(duration, animations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            pan.view!.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(slideBarWidth, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBarTransform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(slideBarWidth * &lt;span class=&quot;type&quot;&gt;SLIDERATE&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 走动距离的没有达到四分之一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(duration, animations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            pan.view!.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;//这个参数需要理解，能复原位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBarTransform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (viewFrameMinX &amp;lt;= slideBarWidth * &lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 往左边至少走动了五分之一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(duration, animations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            pan.view!.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBarTransform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(duration, animations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            pan.view!.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(slideBarWidth, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBarTransform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(slideBarWidth * &lt;span class=&quot;type&quot;&gt;SLIDERATE&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// begin和changed都会进来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pan.view!.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformTranslate&lt;/span&gt;(pan.view!.transform, point.x, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                slideBarTransform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformTranslate&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar.view.transform, point.x * &lt;span class=&quot;type&quot;&gt;SLIDERATE&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pan.setTranslation(&lt;span class=&quot;type&quot;&gt;CGPointZero&lt;/span&gt;, inView: pan.view!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pan.view!.frame.minX &amp;gt;= slideBarWidth) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    pan.view!.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(slideBarWidth, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    slideBarTransform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(slideBarWidth * &lt;span class=&quot;type&quot;&gt;SLIDERATE&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pan.view!.frame.minX &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    pan.view!.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    slideBarTransform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//代理方法，监听左上角点击&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;leftBarButtunClicked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.endEditing(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activeMainViewControler.view.frame.minX == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;, animations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activeMainViewControler.view.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar.view.frame.width, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBarTransform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBar.view.frame.width * &lt;span class=&quot;type&quot;&gt;SLIDERATE&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;, animations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activeMainViewControler.view.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.slideBarTransform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformIdentity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//代理方法，监听左边bar的点击，切换主view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeMainViewToTarget&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(targetView: String?)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; gesture = &lt;span class=&quot;type&quot;&gt;UIPanGestureRecognizer&lt;/span&gt;(target: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, action: &lt;span class=&quot;type&quot;&gt;Selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;didDrag:&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; acticeView = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activeMainViewControler?.view&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//有旧view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//如果点击已经活动的view，那就不要切换了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activeMainViewControler! == mainviewController[targetView!]!&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            leftBarButtunClicked()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//记录目前view的位置，等下交给新view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//          let originTransform = acticeView.frame   //如果这里用frame，则后面手势计算transform的时候会有严重bug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; originTransform = acticeView.transform&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;, animations: &amp;#123; [&lt;span class=&quot;keyword&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                acticeView.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.frame.width, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;, completion: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//重要问题：手势识别器不能同时被多个view注册，否则只认最后一个view的手势&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//解除手势&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        acticeView.removeGestureRecognizer(gesture)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//去除view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        acticeView.removeFromSuperview()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//这里开始加新view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; target = targetView&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; targetController = mainviewController[target]&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.addSubview(targetController.view)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;//加入手势&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    targetController.view.addGestureRecognizer(gesture)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;//一开始从最右边出现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    targetController.view.transform = &lt;span class=&quot;type&quot;&gt;CGAffineTransformMakeTranslation&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.frame.width, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;//然后移到原来的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;, animations: &amp;#123; [&lt;span class=&quot;keyword&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        targetController.view.transform = originTransform&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activeMainViewControler = targetController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//没有旧view，就是第一次启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; target = targetView&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; targetController = mainviewController[target]&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.addSubview(targetController.view)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;//加入手势&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    targetController.view.addGestureRecognizer(gesture)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activeMainViewControler = targetController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//4月20日新增，侧滑栏底下碰到可以收回去，体验更友好&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gestureBtnclicked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        leftBarButtunClicked()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//可以改进的地方：并未检测用户滑动速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;手机号码的鉴定&quot;&gt;&lt;a href=&quot;#手机号码的鉴定&quot; class=&quot;headerlink&quot; title=&quot;手机号码的鉴定&quot;&gt;&lt;/a&gt;手机号码的鉴定&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isTelNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num:String)&lt;/span&gt;&lt;/span&gt;-&amp;gt;&lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mobile = &lt;span class=&quot;string&quot;&gt;&quot;^1(3[0-9]|5[0-35-9]|8[025-9])\\d&amp;#123;8&amp;#125;$&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;type&quot;&gt;CM&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;^1(34[0-8]|(3[5-9]|5[017-9]|8[278])\\d)\\d&amp;#123;7&amp;#125;$&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;type&quot;&gt;CU&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;^1(3[0-2]|5[256]|8[56])\\d&amp;#123;8&amp;#125;$&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;type&quot;&gt;CT&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;^1((33|53|8[09])[0-9]|349)\\d&amp;#123;7&amp;#125;$&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regextestmobile = &lt;span class=&quot;type&quot;&gt;NSPredicate&lt;/span&gt;(format: &lt;span class=&quot;string&quot;&gt;&quot;SELF MATCHES %@&quot;&lt;/span&gt;,mobile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regextestcm = &lt;span class=&quot;type&quot;&gt;NSPredicate&lt;/span&gt;(format: &lt;span class=&quot;string&quot;&gt;&quot;SELF MATCHES %@&quot;&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;CM&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regextestcu = &lt;span class=&quot;type&quot;&gt;NSPredicate&lt;/span&gt;(format: &lt;span class=&quot;string&quot;&gt;&quot;SELF MATCHES %@&quot;&lt;/span&gt; ,&lt;span class=&quot;type&quot;&gt;CU&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; regextestct = &lt;span class=&quot;type&quot;&gt;NSPredicate&lt;/span&gt;(format: &lt;span class=&quot;string&quot;&gt;&quot;SELF MATCHES %@&quot;&lt;/span&gt; ,&lt;span class=&quot;type&quot;&gt;CT&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((regextestmobile.evaluateWithObject(num) == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        || (regextestcm.evaluateWithObject(num)  == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        || (regextestct.evaluateWithObject(num) == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        || (regextestcu.evaluateWithObject(num) == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h4 id=&quot;遗留的问题&quot;&gt;&lt;a href=&quot;#遗留的问题&quot; class=&quot;headerlink&quot; title=&quot;遗留的问题&quot;&gt;&lt;/a&gt;遗留的问题&lt;/h4&gt;&lt;p&gt;在viewdidload里面实例化另一个controller，然后把这个controller里面的一个IBoutlet的view加到主controller的view里面，此时这个子controller的所有IBoutlet都是nil。然而把这个子controller直接的view直接加到主view里面却没问题，操蛋！&lt;/p&gt;
&lt;p&gt; // MARK: - Table view data source&lt;br&gt;insertSubview 和 addSubview 的区别？&lt;br&gt;tableview里面的定位，图片怎么缩小恢复到那个位置&lt;/p&gt;
&lt;p&gt;self.addChildViewController(mainPageViewController)  //这个好像只有在tabbarController里面有用？self.selectedIndex = index可以切换到相应的childView&lt;/p&gt;
&lt;p&gt;//这个可以把主view编程scrollview？&lt;br&gt;    override func loadView() {&lt;br&gt;        super.loadView()&lt;br&gt;        var scrollView:UIScrollView = UIScrollView(frame:super.view.frame)&lt;br&gt;        self.view = scrollView&lt;br&gt;    }&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;IOS开发已经搞了两个月，积累了一些经验。详实记录，以供查阅。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>鼠须管配置指南</title>
    <link href="http://Rocklu.me/2015/05/16/%E9%BC%A0%E9%A1%BB%E7%AE%A1%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
    <id>http://Rocklu.me/2015/05/16/鼠须管配置指南/</id>
    <published>2015-05-16T15:46:00.000Z</published>
    <updated>2016-03-29T09:40:59.000Z</updated>
    
    <content type="html">&lt;p&gt;鼠须管是什么？鼠须管是一款开源的、跨平台的中文输入法。在windows下叫「小狼毫」。（都是古代著名的毛笔的名字）那么，弃用已经挺好用的「搜狗拼音」的理由是什么呢？1.高度可定制。2.搜狗强制收集你的打字记录。&lt;br&gt;&lt;a href=&quot;http://rime.im&quot; style=&quot;color:blue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这款输入法的配置真是非常的用户不友好，为什么呢？所有的配置，都要编辑配置文件！你敢信？&lt;code&gt;yaml&lt;/code&gt;格式的。我看了都是皱起眉头的，别说是普通用户了。&lt;br&gt;官方文档说的也是事无巨细，看了半天不明白，网上也大都是对于界面的简单设置，而我觉得比较有特色的，「字符映射」的设置一时却没有发现。我自己看繁体的文档摸索了半个小时才搞定……现在觉得还是蛮值得的，配置好以后这个输入法的确非常高效。我把常用的特殊字符全都映射到西文上，这样我在写markdown或者中文代码注释的时候，不用频繁切换中英文。大赞！&lt;br&gt;后记，官方文档右上角其实是可以切换到「简体」的。&lt;/p&gt;
&lt;h4 id=&quot;模式设置&quot;&gt;&lt;a href=&quot;#模式设置&quot; class=&quot;headerlink&quot; title=&quot;模式设置&quot;&gt;&lt;/a&gt;模式设置&lt;/h4&gt;&lt;p&gt;在中文输入模式下，按下组合键：&lt;code&gt;control + ~&lt;/code&gt;&lt;br&gt;里面可以设置输入方案，如「明月」「仓颉」等（区别暂不明）。&lt;br&gt;也包含：简体中文，全角半角等。&lt;br&gt;&lt;code&gt;特别注意：&lt;/code&gt;这里选自了某个方案，就会去调用相应的配置文件。改设置的时候注意选择正确的配置文件。我刚才就是看着文档改了半天没用……后来才发现我选择了简体字的方案，改那个默认的当然没用……&lt;/p&gt;
&lt;h4 id=&quot;界面设置&quot;&gt;&lt;a href=&quot;#界面设置&quot; class=&quot;headerlink&quot; title=&quot;界面设置&quot;&gt;&lt;/a&gt;界面设置&lt;/h4&gt;&lt;p&gt;点击&lt;code&gt;setting&lt;/code&gt;可以看到一个配置文件的文件夹。里面的&lt;code&gt;squirrel.yaml&lt;/code&gt;就是管界面配置的。这个写得比较直观，我做了如下改动：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;color_scheme:&lt;/span&gt; luna  //这个是自带的黑色theme&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;horizontal:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  //已经习惯了横向候选字了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;font_point:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;  //我觉得原来默认的太大。。。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;字符映射&quot;&gt;&lt;a href=&quot;#字符映射&quot; class=&quot;headerlink&quot; title=&quot;字符映射&quot;&gt;&lt;/a&gt;字符映射&lt;/h4&gt;&lt;p&gt;鼠须管支持的自定义非常详细，甚至源码都给你你可以自己编译。但是我觉得对我有意义的高级自定义大概就这一个了吧。&lt;br&gt;我选择了「明月简体」方案，主配置文件为：&lt;code&gt;luna_pinyin_simp.schema.yaml&lt;/code&gt;&lt;br&gt;里面一大堆设置，找到关于字符的：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;punctuator:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  import_preset:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;意思是import那个名为default.yaml的文件的配置。打开这个文件，可以看到里面一大堆映射表。&lt;br&gt;对于中文的引号，他原本在default.yaml里面是这样的：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;[&#39;&lt;/span&gt; : [ 「, 【, 〔, ［ ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;意思就是按下这个键，给你这么四个选。我不需要选，我只要直接出第一个就行，于是我自定义直接打上「符号。后面四个也是这样。但是直接改这个表好像是无效的。&lt;/p&gt;
&lt;p&gt;需要自定义一个&lt;code&gt;luna_pinyin_simp.custom.schema.yaml&lt;/code&gt;，里面书写需要更改的「补丁」：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;patch:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  punctuator/half_shape:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;[&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;「&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;」&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;\&#39; : &quot;、&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &#39;&lt;/span&gt;/&lt;span class=&quot;string&quot;&gt;&#39; : &#39;&lt;/span&gt;/&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &#39;&lt;/span&gt;~&lt;span class=&quot;string&quot;&gt;&#39; : &#39;&lt;/span&gt;~&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这部做好以后保存。再次进入&lt;code&gt;luna_pinyin_simp.schema.yaml&lt;/code&gt;：&lt;br&gt;在原来字符的后面再次增加这个配置（我不知道为什么刚刚在custom里写了，这里为什么还要重复配置，但是亲测不写不行）&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;punctuator:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  import_preset:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  half_shape:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;[&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;「&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;」&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;\&#39; : &quot;、&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &#39;&lt;/span&gt;/&lt;span class=&quot;string&quot;&gt;&#39; : &#39;&lt;/span&gt;/&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &#39;&lt;/span&gt;~&lt;span class=&quot;string&quot;&gt;&#39; : &#39;&lt;/span&gt;~&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;保存，退出。然后点击菜单上面的「重新部署」。&lt;/p&gt;
&lt;p&gt;enjoy！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;鼠须管是什么？鼠须管是一款开源的、跨平台的中文输入法。在windows下叫「小狼毫」。（都是古代著名的毛笔的名字）那么，弃用已经挺好用的「搜狗拼音」的理由是什么呢？1.高度可定制。2.搜狗强制收集你的打字记录。&lt;br&gt;&lt;a href=&#39;http://rime.im&#39; style=&#39;color:blue&#39;&gt;下载链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://Rocklu.me/categories/Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://Rocklu.me/2015/04/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <id>http://Rocklu.me/2015/04/09/设计模式入门/</id>
    <published>2015-04-09T15:45:00.000Z</published>
    <updated>2016-03-29T09:41:23.000Z</updated>
    
    <content type="html">&lt;p&gt;有幸听到侯捷老师的面授，不敢懈怠。可惜只有短短8次课，只能做个入门。&lt;br&gt;课件链接：&lt;a style=&quot;text-decoration:none; color:blue;&quot; href=&quot;http://pan.baidu.com/s/1o6625ei&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DesignPatterns_2014.pdf&lt;/a&gt;&lt;br&gt;其中，正红色文字是我自己加的注释。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;什么是设计模式？&quot;&gt;&lt;a href=&quot;#什么是设计模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是设计模式？&quot;&gt;&lt;/a&gt;什么是设计模式？&lt;/h4&gt;&lt;p&gt;设计模式，是从既有开发经验中抽取出来的，对于既有问题的解决方法的范式。&lt;br&gt;通常所说的设计模式，是指GOF(gane of four)四个人编写的《Design Patterns》中提到的23个设计模式。&lt;br&gt;设计模式的实现，需要编程语言支持&lt;code&gt;面向对象&lt;/code&gt;的功能。&lt;br&gt;[另外]对于设计模式后面小括号中的数字，通常指这本书的页码。&lt;br&gt;[经典书]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Design Patterns – GOF&lt;/li&gt;
&lt;li&gt;Refactoring – Martin Fowler&lt;/li&gt;
&lt;li&gt;Refactoring to Patterns – Josiua Kerievsky&lt;/li&gt;
&lt;li&gt;Modern C++ Design – Andrel Alexandrescu&lt;/li&gt;
&lt;li&gt;Small Memory Software – James Nobles&lt;/li&gt;
&lt;li&gt;More effective C++ – Scott Meyers&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Class之间的三种关系&quot;&gt;&lt;a href=&quot;#Class之间的三种关系&quot; class=&quot;headerlink&quot; title=&quot;Class之间的三种关系&quot;&gt;&lt;/a&gt;Class之间的三种关系&lt;/h4&gt;&lt;p&gt;_&lt;/p&gt;
&lt;h5 id=&quot;composition-复合&quot;&gt;&lt;a href=&quot;#composition-复合&quot; class=&quot;headerlink&quot; title=&quot;composition-复合&quot;&gt;&lt;/a&gt;composition-复合&lt;/h5&gt;&lt;p&gt;A持有B的实体，则AB的关系为复合。&lt;br&gt;[注意]两者的生命期完全相同&lt;/p&gt;
&lt;h5 id=&quot;Delegation-委托&quot;&gt;&lt;a href=&quot;#Delegation-委托&quot; class=&quot;headerlink&quot; title=&quot;Delegation-委托&quot;&gt;&lt;/a&gt;Delegation-委托&lt;/h5&gt;&lt;p&gt;A持有指向B的指针，则A是&lt;code&gt;委托者&lt;/code&gt;，B是&lt;code&gt;受托者&lt;/code&gt;或&lt;code&gt;代理&lt;/code&gt;。即，A向B传递信息，委托这个任务给代理B处理。&lt;br&gt;[注意]两者生命周期不同&lt;br&gt;[例子]一个窗口（委托者），持有一个绘图类（受托者）的指针，把绘图的这部分任务委托给绘图类做。&lt;code&gt;那么为什么需要用指针而不是直接持有呢？&lt;/code&gt;因为这个指向绘图类的指针，将来是可以指向任何一个该类的&lt;code&gt;子类&lt;/code&gt;的，只要继承自该绘图类的子类，后期都是可以更换使用的！&lt;/p&gt;
&lt;h5 id=&quot;Inheritance-继承&quot;&gt;&lt;a href=&quot;#Inheritance-继承&quot; class=&quot;headerlink&quot; title=&quot;Inheritance-继承&quot;&gt;&lt;/a&gt;Inheritance-继承&lt;/h5&gt;&lt;p&gt;没啥说的。。。。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;OOP开发的六大守则（课程只提两个）&quot;&gt;&lt;a href=&quot;#OOP开发的六大守则（课程只提两个）&quot; class=&quot;headerlink&quot; title=&quot;OOP开发的六大守则（课程只提两个）&quot;&gt;&lt;/a&gt;OOP开发的六大守则（课程只提两个）&lt;/h4&gt;&lt;p&gt;_&lt;/p&gt;
&lt;h5 id=&quot;OCP-open-closed-principle-开放封闭守则&quot;&gt;&lt;a href=&quot;#OCP-open-closed-principle-开放封闭守则&quot; class=&quot;headerlink&quot; title=&quot;OCP (open-closed principle, 开放封闭守则)&quot;&gt;&lt;/a&gt;OCP (open-closed principle, 开放封闭守则)&lt;/h5&gt;&lt;p&gt;对扩充开放，对修改封闭。&lt;br&gt;意思是，class写完以后，要能够有灵活度以后能加新的功能，但是不应该需要修改原来写好的代码。&lt;br&gt;[例子]链接库、jar&lt;br&gt;[关键]抽象化&lt;/p&gt;
&lt;h5 id=&quot;LSP-Liskov-Substitution-principle-里氏替代原则&quot;&gt;&lt;a href=&quot;#LSP-Liskov-Substitution-principle-里氏替代原则&quot; class=&quot;headerlink&quot; title=&quot;LSP (Liskov Substitution principle, 里氏替代原则)&quot;&gt;&lt;/a&gt;LSP (Liskov Substitution principle, 里氏替代原则)&lt;/h5&gt;&lt;p&gt;父类能用的场合，子类一定能用。（子类 &lt;code&gt;is a&lt;/code&gt; 父类）&lt;br&gt;用在什么地方呢？就是有时候考虑要借用一个写好类的功能时，要继承呢？还是要复合呢？的时候考虑这个准则来判定要不要使用继承。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;关于类图&quot;&gt;&lt;a href=&quot;#关于类图&quot; class=&quot;headerlink&quot; title=&quot;关于类图&quot;&gt;&lt;/a&gt;关于类图&lt;/h4&gt;&lt;p&gt;类图有多种流派，这里解释UML风格的类图&lt;/p&gt;
&lt;h5 id=&quot;类表示&quot;&gt;&lt;a href=&quot;#类表示&quot; class=&quot;headerlink&quot; title=&quot;类表示&quot;&gt;&lt;/a&gt;类表示&lt;/h5&gt;&lt;p&gt;方框，第一行类名，第二行类数据，第三行类方法。&lt;br&gt;不必写全，只写需要描述的部分。&lt;br&gt;如果没有类数据或类方法，空白即可。&lt;br&gt;如果是&lt;code&gt;斜体&lt;/code&gt;的函数，是虚函数&lt;br&gt;如果有&lt;code&gt;下划线&lt;/code&gt;，表示static成员&lt;/p&gt;
&lt;h5 id=&quot;类关系&quot;&gt;&lt;a href=&quot;#类关系&quot; class=&quot;headerlink&quot; title=&quot;类关系&quot;&gt;&lt;/a&gt;类关系&lt;/h5&gt;&lt;p&gt;&lt;code&gt;菱形&lt;/code&gt;标记代表持有，实心是持有实体（复合），空心是持有指针（委托）&lt;br&gt;&lt;code&gt;剪头&lt;/code&gt;指向一个类，代表继承自这个类&lt;br&gt;&lt;code&gt;实线&lt;/code&gt;拖出来的方块，代表对某个函数的伪代码片段&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Template-Method&quot;&gt;&lt;a href=&quot;#Template-Method&quot; class=&quot;headerlink&quot; title=&quot;Template Method&quot;&gt;&lt;/a&gt;Template Method&lt;/h4&gt;&lt;p&gt;Define the skeleton of an algorithm in an operation, &lt;code&gt;deferring&lt;/code&gt; some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.&lt;/p&gt;
&lt;p&gt;最常见的就是在设计application framework的时候，把大部分通用的流程写好，留出一些需要更改的部分，以&lt;code&gt;虚函数&lt;/code&gt;的方式留在那里，俗称“孔”。然后开发者在使用这些类库的时候，只需要&lt;code&gt;重写&lt;/code&gt;或&lt;code&gt;实现&lt;/code&gt;这些孔，就能做到写很少代码作出一个完整的应用。&lt;br&gt;所谓template，就是类库里面的那种通用流程的函数，template函数里面会调用到孔函数。&lt;/p&gt;
&lt;p&gt;[实现]某些个性化功能的函数写成virtual，让子类去实现覆盖&lt;br&gt;[另]framwork有很多种，appliation framwork是用来帮助创建apllication的framwork。好像废话。。。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Observer&quot;&gt;&lt;a href=&quot;#Observer&quot; class=&quot;headerlink&quot; title=&quot;Observer&quot;&gt;&lt;/a&gt;Observer&lt;/h4&gt;&lt;p&gt;Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.&lt;br&gt;[侯捷注]上面英文的定义有问题，实际上，notify是一定的，update是可选的。&lt;br&gt;所谓one-to-many，one指被观察者，many指观察者。被观察者发生变化的时候，它有责任告诉所有观察者自己发生了变化，让观察者处理变化。有点像信息推送、报纸订阅。&lt;br&gt;[实现]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;被观察者需要实现的功能&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;存放观察者的容器，如：vector。一般持有指向观察者的&lt;code&gt;指针&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;增加观察者。即让观察者注册，我需要知道你的变化。&lt;/li&gt;
&lt;li&gt;删除观察者。即，退订&lt;/li&gt;
&lt;li&gt;通知观察者。push message。这里要调用观察者的某个方法。这个方法是协定好的。&lt;/li&gt;
&lt;li&gt;一个flag，标记是否发生过变化。changed&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观察者需要实现：&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;实现由被观察者调用的那个方法，对被观察者的变化进行处理。这个函数通常会把指向被观察者的指针当作一个函数传递过来，有时还会传递一个hint，告诉你我具体修改了哪些数据。&lt;br&gt;[使用]&lt;br&gt;一般库函数会写好一个观察者类一个被观察者类，只要从他们继承，然后实现通知方法，就能实现功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Adapter&quot;&gt;&lt;a href=&quot;#Adapter&quot; class=&quot;headerlink&quot; title=&quot;Adapter&quot;&gt;&lt;/a&gt;Adapter&lt;/h4&gt;&lt;p&gt;Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.&lt;br&gt;望文生义，适配器。就是用一些浅层的包装，让以前写好的类能够用到新的地方。&lt;br&gt;从实现方式来说，有Class Adapter（用继承实现）和Object Adapter（用复合或委托实现）&lt;br&gt;[注]那么，我们要继承还是不要继承呢？请参考LSP准则&lt;br&gt;从功能来说，有Container Adapters, Function Adapters, Iterator Adapters。&lt;/p&gt;
&lt;p&gt;[名词注解]&lt;br&gt;adapter—-适配器&lt;br&gt;adaptee—-原来的对象，被适配的对象&lt;br&gt;adaptable—-可以被适配器适配的能力&lt;/p&gt;
&lt;h5 id=&quot;Container-Adapters&quot;&gt;&lt;a href=&quot;#Container-Adapters&quot; class=&quot;headerlink&quot; title=&quot;Container Adapters&quot;&gt;&lt;/a&gt;Container Adapters&lt;/h5&gt;&lt;p&gt;例如把dequeue改成一个stack这种简单的应用&lt;br&gt;实现上，可以是继承，也可以是复合。主要是调用原来容器的方法，适配新的方法。&lt;/p&gt;
&lt;h5 id=&quot;Funcion-Adapters&quot;&gt;&lt;a href=&quot;#Funcion-Adapters&quot; class=&quot;headerlink&quot; title=&quot;Funcion Adapters&quot;&gt;&lt;/a&gt;Funcion Adapters&lt;/h5&gt;&lt;p&gt;重用以前写好的函数，通过绑定某些参数（固定参数的值），或者更换参数的顺序，使其能用于现在的应用。&lt;br&gt;问题在于，函数的实参不是在调用的时候才确定的吗？为什么可以事先绑定呢？&lt;br&gt;答案是这样的：函数适配器其实不是一个函数，也不是一个函数指针。它是一个class，function object，这种类，由于重载了&lt;code&gt;()&lt;/code&gt;小括号运算符，所以&lt;code&gt;表现得像一个函数&lt;/code&gt;。是一个class呢，就能够把预先输入的参数，作为class的data储存起来，当需要调用的时候，就是除法这个小括号重载函数的时候，再把这个预先输入的（绑定的）值拿出来，放到那个需要适配的函数的实参里面去。&lt;/p&gt;
&lt;p&gt;思路是比较简单的，实现起来还是蛮复杂的。复杂度主要来自于这个适配器是范型的，对于类型的判断和传递挺费劲。&lt;br&gt;[实现]&lt;br&gt;对于适配器来说，我需要最后表现为一个函数，那么就像前面提到的，我需要是一个function object，我要实现：1.持有适配的adaptee函数，2.持有需要绑定的具体的参数，3.一个小括号的重载来使用绑定的参数来调用adaptee函数。&lt;/p&gt;
&lt;p&gt;但是问题来了，我事先不知道你这个adaptee的参数类型，我怎么知道我要绑定的参数的类型呢？于是adaptee必须要有让adapter查询参数类型的接口。C++STL的解决方案是让所有想adaptable的class全都继承一种很奇怪的struct（如：&lt;code&gt;unary_fuction&lt;/code&gt;, &lt;code&gt;binary_fuction&lt;/code&gt;），这种struct呢，里面只有几个typedef，它自己本身也是范型的。这种struct干什么呢，就是让需要adaptable的class呢，在继承它的时候，就把自己的参数啊、返回值这种类型全都交给它，然后它有几个typedef把这几个类型别名为一组&lt;code&gt;标准的&lt;/code&gt;名字（&lt;code&gt;first_argument_type&lt;/code&gt;），将来供adapter询问（查询）。于是，adapter只要进入adaptee的命名空间，就可以访问到这个adaptee的父类，就是那个怪怪的struct，然后用那个标准的名字就可以知道adaptee的参数类型啊、返回值啊之类的了。[另]得到的这个类型，可以直接用哦，像什么加个小括号就是构造函数可以构造这个类的实例啊之类的。&lt;/p&gt;
&lt;p&gt;最后呢，这个adapter有可能并不是最终产品啊，或许我们需要再将其适配，所以，它也需要adaptable，于是，它也要继承那个怪怪的struct。&lt;/p&gt;
&lt;p&gt;[注意]对于范型的function object来说，func&lt;type&gt;()是它的实例，func&lt;type&gt;是它的类型，在形式上还是比较迷惑的。表老把它想成函数指针了，人家是一种class。&lt;/type&gt;&lt;/type&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Composite&quot;&gt;&lt;a href=&quot;#Composite&quot; class=&quot;headerlink&quot; title=&quot;Composite&quot;&gt;&lt;/a&gt;Composite&lt;/h4&gt;&lt;p&gt;Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects &lt;code&gt;uniformly&lt;/code&gt;.&lt;br&gt;复合设计模式的精髓，在于组成树形结构的时候，以&lt;code&gt;一致的方式&lt;/code&gt;对待单一物件和复合物件。&lt;br&gt;[注释]&lt;br&gt;复合物件，指的是单一物件的容器，例如文件夹&lt;br&gt;单一物件，即文件。&lt;br&gt;所谓树形结构，即文件夹内既可以放文件，也可以放文件夹。&lt;br&gt;一致的方式，就是在操作文件夹时，用同一组函数（方法）对待文件夹和普通文件。但是同样的函数，对于单一物件，应该可以直接得到返回值，而对于复合物件，就可能是递归的形式。&lt;/p&gt;
&lt;p&gt;[例子]&lt;br&gt;File system&lt;br&gt;Windowing system – 窗体内嵌套窗体，也可以增加物件&lt;br&gt;Command – 命令中嵌套命令，也有参数&lt;/p&gt;
&lt;p&gt;[实现]&lt;br&gt;对于&lt;code&gt;一视同仁&lt;/code&gt;的阐释，又两个方面：&lt;br&gt;首先 ，复合物件里面必须要有容器。容器必须既可以装复合物件又可以装单一物件。&lt;br&gt;其次 ，复合物件和单一物件必须要有相同的API。&lt;/p&gt;
&lt;p&gt;那么解决方法显而易见：让它们&lt;code&gt;共同继承&lt;/code&gt;一个父类。然后复合物件的容器可以存放&lt;code&gt;指向父类的指针&lt;/code&gt;。再者，两者公共的API可以在父类中定义&lt;code&gt;虚方法&lt;/code&gt;，由两个子类各自去实现自己的版本。&lt;/p&gt;
&lt;p&gt;[另外]这里有个常见的小技巧，对于个别物件不应该定义的方法（例如增加子物件），也抽离出来，在上层父类中定义，并把这个方法的内容写成&lt;code&gt;抛出异常&lt;/code&gt;。然后，让复合物件重写这个方法。于是，如果个别物件调用了这个方法自然抛出异常。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Iterator&quot;&gt;&lt;a href=&quot;#Iterator&quot; class=&quot;headerlink&quot; title=&quot;Iterator&quot;&gt;&lt;/a&gt;Iterator&lt;/h4&gt;&lt;p&gt;Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.&lt;br&gt;[注释]aggregate：容器，即container&lt;br&gt;迭代器模式，专门用在对容器的遍历。希望把容器的构造抽象，提供给外界&lt;code&gt;统一的接口&lt;/code&gt;，遍历容器。&lt;br&gt;C++的迭代器，是一种行为像指针一样的class。&lt;/p&gt;
&lt;p&gt;[实现]&lt;br&gt;首先，对于每一种容器，只有它自己才直到要怎么去遍历自己。于是，每个容器都应该定义自己的迭代器。&lt;/p&gt;
&lt;p&gt;其次，对于一个实际的容器，这个用于遍历的“指针”，对于不同的访问者来说，不应该是唯一的、公用的，而应该是给每个访问者创建一个，你遍历你的，他遍历它的。于是，迭代器不应该写死在容器里，也不应该让容器持有指向迭代器的指针（因为数量是未知的）。那怎么办呢？给每一种容器，特别定义一个专属的迭代器class。Java中，当访问者需要一个迭代器时，由容器为其创造一个。而在C++中，在容器的命名空间中的typedef提供了迭代器的类型名称，由用户手动创建。大同小异。&lt;/p&gt;
&lt;p&gt;对于迭代器而言，为了表现得像一个指针，则需要重载应用于指针得操作符，对外提供统一得API。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;内存管理-Memory-Pool&quot;&gt;&lt;a href=&quot;#内存管理-Memory-Pool&quot; class=&quot;headerlink&quot; title=&quot;内存管理(Memory Pool)&quot;&gt;&lt;/a&gt;内存管理(Memory Pool)&lt;/h4&gt;&lt;p&gt;Memory Pool并不属于GOF的23种设计模式之列，但是也非常重要。&lt;/p&gt;
&lt;h5 id=&quot;背景知识－内存分配&quot;&gt;&lt;a href=&quot;#背景知识－内存分配&quot; class=&quot;headerlink&quot; title=&quot;背景知识－内存分配&quot;&gt;&lt;/a&gt;背景知识－内存分配&lt;/h5&gt;&lt;p&gt;[调用的层次关系：]&lt;br&gt;&lt;code&gt;Applications&lt;/code&gt; -&amp;gt; &lt;code&gt;C++Library&lt;/code&gt;(Stl,Boost) -&amp;gt; &lt;code&gt;C++Primitives&lt;/code&gt;(new) -&amp;gt; &lt;code&gt;CRT&lt;/code&gt;(c runtime) -&amp;gt; &lt;code&gt;OS api&lt;/code&gt;(HeapAlloc)&lt;/p&gt;
&lt;p&gt;[内存管理实现（bookkeeping）]&lt;br&gt;CRT并没有像操作系统那样，对分配出去的内存用专门的数据结构记录管理。那么CRT怎么在free的时候，知道这个指针指向的地址，当初分配了多大空间给他呢？答案是在分配出去指针前面藏一个&lt;code&gt;cookie&lt;/code&gt;，大小一般是4B。于是在free的时候，往前面看下cookie，就知道应该去释放多大的内存了。&lt;br&gt;[注释]忘记在哪里看到的cookie的来源，可能是西方什么故事的典故，主要意思是：小孩子来我家里玩，然后走的时候我把我自己做的cookie给她们带回去吃，每个小孩都给一种不一样的cookie。然后走了就走了，我也不去记住每个小孩的样子。但是以后每当再有小孩来的话，只要他带着我当时给他的cookie，我就知道他曾经来过，也知道他是谁啦～&lt;/p&gt;
&lt;h5 id=&quot;背景知识－C-中的new操作符&quot;&gt;&lt;a href=&quot;#背景知识－C-中的new操作符&quot; class=&quot;headerlink&quot; title=&quot;背景知识－C++中的new操作符&quot;&gt;&lt;/a&gt;背景知识－C++中的new操作符&lt;/h5&gt;&lt;p&gt;在C++中，new操作会被编译器翻译为三个动作：（以new className()为例）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;code&gt;::operator new()&lt;/code&gt;分配一块内存。（参数是sizeof(className)）&lt;/li&gt;
&lt;li&gt;把返回的指针&lt;code&gt;static_cast&lt;/code&gt;至className类型&lt;/li&gt;
&lt;li&gt;调用className的&lt;code&gt;构造函数&lt;/code&gt;&lt;br&gt;[另外]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::operator new()&lt;/code&gt;这个全局函数是可以重载的，既可以是全局重载，也可以是在某个特定的class里面重载。&lt;/li&gt;
&lt;li&gt;所有的内存分配操作，最后都会调用&lt;code&gt;malloc()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上面三个步骤如果失败，会抛出异常std::bad_alloc&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[关于&lt;code&gt;delete[]&lt;/code&gt;中的方括号]&lt;br&gt;这叫&lt;code&gt;array new&lt;/code&gt;、&lt;code&gt;array delete&lt;/code&gt;&lt;br&gt;加了方括号，会对地址内每个元素调用析构函数。不加，则仅对第一个元素调析构。&lt;br&gt;所以问题就是出在要析构的class上。对于持有指向heap指针的class，仅仅调用free释放这个class本身是不够的。对于这种类型的数组，delete的时候务必加方括号。一个好习惯是：new的时候有方括号，那么delete的时候也要有。&lt;/p&gt;
&lt;p&gt;不加方括号也正确的例子：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;[] p;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先明确，delete和new类似，最后调用的是free()。对于由array new产生的p指向的空间，p前面的cookie会正确纪录分配给p的空间大小，是3份的int。所以无论这个delete加不加方括号，只要调用了free，free就会读取cookie，得到正确的空间大小，就能正确释放。&lt;/p&gt;
&lt;h5 id=&quot;Memory-Pool&quot;&gt;&lt;a href=&quot;#Memory-Pool&quot; class=&quot;headerlink&quot; title=&quot;Memory Pool&quot;&gt;&lt;/a&gt;Memory Pool&lt;/h5&gt;&lt;p&gt;[为啥要有memory pool]?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于小型class，4B的cookie代价太大&lt;/li&gt;
&lt;li&gt;虽然malloc的实现各不相同，对于各种&lt;code&gt;不同的大小&lt;/code&gt;的内存分配／归还，产生大量碎片。&lt;/li&gt;
&lt;li&gt;系统调用的成本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[memory pool思想]（focus on &lt;code&gt;SGI allocator&lt;/code&gt;）&lt;br&gt;回想一下操作系统中的内存管理，其实思想有点类似于&lt;code&gt;分页存储&lt;/code&gt;。&lt;br&gt;虽然用户提出的内存要求是不确定的，但是我们把内存以&lt;code&gt;固定大小的block&lt;/code&gt;来配给内存。把外碎片变成内碎片。同时，由于大小是固定的，那我也不用cookie来纪录当时给了多大。这样可以解决前两个问题。&lt;br&gt;对于频繁的系统调用，请回想&lt;code&gt;printf,scanf&lt;/code&gt;不管你要多少数据，我先读一大片进缓冲区，当你下次再要的时候，就不用再系统调用了。memory pool也是这个缓冲的思想，只不过pool是那种用完了还可以放进去循环利用的感觉，buffer就是一次性的。&lt;/p&gt;
&lt;p&gt;[SGI allocator的实现概要]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大于128B的请求，直接调用malloc。小于128B的，按照8、16、24…120、128这16种大小分配最合适的一块。&lt;/li&gt;
&lt;li&gt;用一个数组，存放16个free_list（单链表）。这每个list，用来纪录对应的16种大小的block的分配情况。另外有两个指针纪录pool的开始和末尾。&lt;/li&gt;
&lt;li&gt;分配策略如下：根据请求大小，可知应该去找哪个list要。先看list有没余量block，如果没有，就把pool全都那过来用。如果pool里面的空间都不够，就像系统请求40个当前block大小的内存，20个给list，20个给pool。&lt;/li&gt;
&lt;li&gt;关于归还，客户把block还给list，然后就结束了。这个allocator并不归还内存给系统。&lt;/li&gt;
&lt;li&gt;对于向系统请求失败的情况，分配器会看看有没有更大的list里面有空block，如果有的话可以借一块过来。&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;具体实现的细节很多，请看源码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[SGI allocator的缺陷]&lt;br&gt;内存不归还。。。其实是没法归还，因为单链表结构在反复使用后，已经无法判定block们是不是在一块连续的内存空间里面了。&lt;br&gt;[改进]例子：Loki small object allocator，参考书：&lt;morden c++=&quot;&quot; design=&quot;&quot;&gt;&lt;br&gt;block们用&lt;code&gt;静态链表&lt;/code&gt;连接，而且少量block就规划为一个chunk。静态链表解决了空间不连续的问题，而对比整个free_list，chunck较小，比较容易形成全空的情况，此时就可以回收归还给OS。&lt;br&gt;提一个细节，这种pool，即使归还内存，一般也会留存一个chunk在手里，以备客户需要。&lt;/morden&gt;&lt;/p&gt;
&lt;p&gt;[应用]&lt;br&gt;其实，有的malloc实现中，也采用了pool的思想，但毕竟是通用的、对各种个样大小都要适合的服务。而allocator用的memory pool，则是对&lt;code&gt;固定大小&lt;/code&gt;内存请求的优化（所以经常用在&lt;code&gt;容器&lt;/code&gt;中）。&lt;/p&gt;
&lt;p&gt;[嗯，那个。。。我不会写这个pool，可是我也想用这个allocator，可以嘛？]&lt;br&gt;可以的哦，亲～方法如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//方法一：重载全局::operator new()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(size_t size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; alloc::allocate(size); &lt;span class=&quot;comment&quot;&gt;// get from free-list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* p, size_t size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alloc::deallocate(p, size); &lt;span class=&quot;comment&quot;&gt;// return to free-list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//方法二：重载某个class的operator new()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//注意这个class只有小于128B，才有意义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; MyClass&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(size_t size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; alloc::allocate(size); &lt;span class=&quot;comment&quot;&gt;// get from free-list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* p, size_t size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alloc::deallocate(p, size); &lt;span class=&quot;comment&quot;&gt;// return to free-list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//其他成员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Factory-Method&quot;&gt;&lt;a href=&quot;#Factory-Method&quot; class=&quot;headerlink&quot; title=&quot;Factory Method&quot;&gt;&lt;/a&gt;Factory Method&lt;/h4&gt;&lt;p&gt;Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class &lt;code&gt;defer&lt;/code&gt; instantiation to subclasses.&lt;br&gt;又是defer！与Template Method相比，Factory Method延缓的是&lt;code&gt;实例化&lt;/code&gt;的动作。主要的应用是在大型框架。大型框架的运作，需要预先对用户派生的子类进行操作。但是用户具体定义的类name预先是不可能知道的。所以这里必须进行抽象化延缓。&lt;br&gt;[注释]Factory Method中，method指的是一个用来创建子类的&lt;code&gt;虚函数&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;[问题是什么呢？]&lt;br&gt;框架现在需要实例化这个不知道名字的子类，怎么new呢？[注释]这个动作叫做&lt;code&gt;dynamic creation&lt;/code&gt;&lt;br&gt;由于C++语言本身的限制，通过一个string变量来制定需要实例化对象的名字是禁止的。我们唯一能做的，就是预先设定好需要实例化的这个class，然后比较后期需要创建class的名字（string），如果string相同，则创建对应的class。可以看出，这个用来比较class name的string，也需要是预先设定好的。&lt;/p&gt;
&lt;p&gt;除此之外，就算你的字符串比对成功匹配了，就算现在就是可以调用这个预先写好的new语句了，那这句new写在哪里呢？写框架的人可能有本事把这句话写死再框架代码里吗？不可能，显然必须是写在用户代码里的。写在用户代码里？难道让那个class自己new自己？是的，你没有听错。&lt;br&gt;但是可能吗？我框架连你得class都找不到，怎么去找你class里面写的new？况且，你都没有实例化，怎么调用new函数？&lt;/p&gt;
&lt;p&gt;[解决方案]–&amp;gt;隔一层&lt;br&gt;第一个问题，我不是没办法写死那个比较的string嘛？那我可以加一个中间物件，比如一个表，一个list。我去从这个表里吗取名字，而这个表，是deffer到用户那里去填写的。意思就是，我新派生了一个子类，于是我把我子类的名字（string）注册到那个表里面去，然后框架在需要new我的时候，就例行公事去那个表里面检查。good！解决第一个问题。&lt;br&gt;第二个问题，怎么new。这个简单，把这个new语句，写成&lt;code&gt;static方法&lt;/code&gt;，则不用实例化也可调用。&lt;br&gt;那怎么调用呢？ 嗯。。。调用函数呢，需要函数的入口地址，对吧？要么，给class name，是一个入口。或者，直接给这个函数地址，也OK，对不？。。。。嗯，有点怪，然后呢？简单啊，把这个自己创建自己的函数指针，直接放到前面提到的那张表里啊！查表，名字对上，取出自己new自己的函数地址，然后调用&lt;code&gt;用户写的&lt;/code&gt;new语句，new出来的实例返回给框架，搞定！&lt;/p&gt;
&lt;p&gt;[总结]&lt;br&gt;所谓“工厂方法”，指的是一套&lt;code&gt;接口&lt;/code&gt;，包括框架维护的一个数据结构，让用户注册。以及用户自己书写的自己new自己的方法。（在框架的中，用户派生类的父类需要定义一个抽象函数强制要求用户定义这个函数。）&lt;br&gt;另外：这个“注册”和“自己创建自己”的动作，由于比较制式，经常由一个常规的宏函数实现（回想QT）。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Prototype&quot;&gt;&lt;a href=&quot;#Prototype&quot; class=&quot;headerlink&quot; title=&quot;Prototype&quot;&gt;&lt;/a&gt;Prototype&lt;/h4&gt;&lt;p&gt;Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.&lt;br&gt;模板模式也是解决用户子类实例化的问题。但是我不能明白这么做的用意，可能是与工厂方法模式解决类似的问题。但是给出的例子，主要在客户端那边的实例化，不理解。&lt;/p&gt;
&lt;p&gt;[什么意思呢]&lt;br&gt;prototype意思是原型，意思是，新定义的子类，在程序开始创建的时候，就&lt;code&gt;自动创建一个“原型”实例&lt;/code&gt;，放在父类的容器里。虽然子类可以变化增加，但是因为父类是预先写好的嘛，如果想实例化子类，只要通过找到父类的容器里面的原型，就可以让这个原型new一个新的子类出来（美其名曰：clone函数，其实就是自己new自己）。好像是一个比较优雅的解法？不是嘛？～&lt;/p&gt;
&lt;p&gt;[实现]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，在程序启动时自动创建实例，能做到？可以的，叼的不行了。在子类定义里面，放一个static的自己（static就不算循环定义了？需要复习static）。然后static成员是有一次赋初值的机会的，写在class外面就行，这个动作不需要有人去手动调用它。于是这个初值就构造一个自己。（简直匪夷所思！）实例化好了对吧，然后更happy的来了，在构造函数里面，调用父类的某个函数，把自己放到父类的原型容器里去。天哪，代码还没开始跑，每个子类都已经各就各位了！&lt;/li&gt;
&lt;li&gt;于是你也发现了，每个子类都会copy一份父类，如果这个容器不是static的，那么大家会在各自不同的容器里面，这就不happy了。&lt;/li&gt;
&lt;li&gt;于是呢，用户拿到父类，容器在手，再无他求啊！&lt;/li&gt;
&lt;li&gt;对于框架来说，也是可以通过父类的容器比对或者找到需要实例化的子类的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[另外]&lt;br&gt;具体实现时，常把子类的构造函数写为&lt;code&gt;私有&lt;/code&gt;，这样做的想法，可能是想统一用父类的接口，不要让用户去处理子类。美其名曰：解偶。decouple。用户一切的子类创建必须通过父类的容器。&lt;/p&gt;
&lt;p&gt;总之呢，是不太理解这个设计模式啦。。。只是觉得手段很精妙！&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Reference-Counting&quot;&gt;&lt;a href=&quot;#Reference-Counting&quot; class=&quot;headerlink&quot; title=&quot;Reference Counting&quot;&gt;&lt;/a&gt;Reference Counting&lt;/h4&gt;&lt;p&gt;引用计数，非GOF的23个设计模式之一。主要的目的就是想省内存，即对于需要&lt;code&gt;深拷贝&lt;/code&gt;来管理内存的物件，使用&lt;code&gt;写时复制&lt;/code&gt;(copy on write)的技术，让用户看上去是深拷贝，而实际上是浅拷贝。只有当用户对拷贝的物件实际进行修改动作时，才真正深拷贝。&lt;/p&gt;
&lt;p&gt;[应用]&lt;br&gt;STL的string。swift里面好像都是引用计数啊，还有vfork不知道是不是。&lt;br&gt;另外，引用计数在内存管理中也用到。没有指针指向自己时自动销毁。&lt;/p&gt;
&lt;p&gt;[困难]-&amp;gt;我怎么知道有几个人持有指向我的指针呢？&lt;br&gt;一个比较自然的想法，是搞一个用户列表在我自己的这个class里面，每个实例拥有一个表(不要搞成static)，这个表里面纪录着持有自己的对象。&lt;/p&gt;
&lt;p&gt;这样做可以达到目的，但是对于使用者来说，需要增加额外的操作，比如在拷贝时，要去你的表里面增加自己，或者在销毁时，检查自己是不是表里面的最后一个，等等。&lt;br&gt;同时也不能做到自己销毁自己。&lt;/p&gt;
&lt;p&gt;[解决]&lt;br&gt;我们又想到可以再包装一层，把&lt;code&gt;实际的value&lt;/code&gt;与&lt;code&gt;对引用的manager&lt;/code&gt;分成两个class，以string为例，把实际的字符串内容单独写到一个class里面，同时这个class再附加一个int字段来纪录自己的引用者。（这样与上面的table做法相比更省事）&lt;br&gt;而另外一个manager，则持有一个value类的引用，让外界持有这个manager，然后这个manager对外只要表现的像一个实际的value就行了（重载相关操作符嘛）。&lt;br&gt;当这个manager被copy时，仅仅做对manager的浅copy，然后让value类的引用计数＋1即可。同样的，manager销毁时，检查value类的引用计数，如果是1，那么除了销毁自己，顺手也把value类销毁掉。&lt;/p&gt;
&lt;p&gt;[那么问题来了]-&amp;gt;这样的浅copy，用户是不知道的，如果被改动不是错误了嘛？&lt;br&gt;是的，我们需要实现&lt;code&gt;copy_on_write&lt;/code&gt;。&lt;br&gt;那么，我们怎么知道别人要write我了呢？还是重载操作符，对于可能&lt;code&gt;暴露自己handler&lt;/code&gt;的，或者&lt;code&gt;直接修改&lt;/code&gt;自己的，全都copy一份，再进行相应操作即可。&lt;/p&gt;
&lt;p&gt;[问题]&lt;br&gt;你可能注意到了，上面需要真实copy的情况，直接修改自己是没商量的，而对于暴露自己handler的情况，可能用户并没有要修改，此时盲目copy造成资源浪费。但是对于C++语言功能来说，在传出自己handler时，并不能用户是否要进行修改，以决定是否要copy。只能是悲观得认为用户要改，保守操作。&lt;/p&gt;
&lt;p&gt;这个问题可用proxy解决。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;/h4&gt;&lt;p&gt;Provide a surrogate or placeholder for another object to &lt;code&gt;control access to it&lt;/code&gt;.&lt;br&gt;[注释]surrogate：代理人&lt;br&gt;我觉得代理人模式也是又deffering的意思，我们不是直接对某个目标物件操作，而是通过这个proxy类来获取、操作目标物件。&lt;/p&gt;
&lt;p&gt;有点属性值里面的setter和getter的意思，对代理操作，然后进行相关处理后，再又代理对实际的值进行处理。&lt;br&gt;这样多了一个中间层，可以有很多机会判断。比如在需要的时候再实例化目标啊之类的。&lt;/p&gt;
&lt;p&gt;[另外]&lt;br&gt;对于上面引用计数不能解决的问题。（即暴露handler时无法判断用户是不是要修改）。我们可以不返回真实的value类出去，而是返回一个proxy给用户，也是表现的像一个value就行了。然后当这个proxy被修改的时候，再进行真实的copy。这样问题就解决了。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;总结和反思&quot;&gt;&lt;a href=&quot;#总结和反思&quot; class=&quot;headerlink&quot; title=&quot;总结和反思&quot;&gt;&lt;/a&gt;总结和反思&lt;/h4&gt;&lt;p&gt;学完了这门课，给我最深刻的印象是，反反复复出现的&lt;code&gt;中间层&lt;/code&gt;和&lt;code&gt;统一化&lt;/code&gt;的思想。&lt;br&gt;中间层，把变化的、不确定的、暂时不知道的情况，先放置一个中间层，一端确定下来。然后把剩下的另一端不确定的，&lt;code&gt;推迟&lt;/code&gt;到实际确定的时候再写清楚。或者一端确定，另一端发生的变化，并不会影响确定的那一端。&lt;br&gt;统一化的处理，可以大大简化工程的难度。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;关于语言的零散笔记&quot;&gt;&lt;a href=&quot;#关于语言的零散笔记&quot; class=&quot;headerlink&quot; title=&quot;关于语言的零散笔记&quot;&gt;&lt;/a&gt;关于语言的零散笔记&lt;/h4&gt;&lt;p&gt;C++中reference的实现底层用的指针&lt;/p&gt;
&lt;p&gt;java的方法全是虚函数，class全是引用&lt;/p&gt;
&lt;p&gt;什么时候需要用虚函数？&lt;br&gt;设计父类时，如果某个方法需要由子类定义，或重新定义，那么应该被设计为虚函数&lt;/p&gt;
&lt;p&gt;临时对象的生存期？待深入&lt;/p&gt;
&lt;p&gt;java容器能放所有类型，是因为java有单根的继承体系，指向根的指针能指向任何类型&lt;/p&gt;
&lt;p&gt;关于const成员函数&lt;br&gt;非const的class，也可以调用const的成员函数。但是会优先调用非const版本。&lt;/p&gt;
&lt;p&gt;静态成员变量不会增加实例的size&lt;/p&gt;
&lt;p&gt;变量最好在使用的前一刻再定义，特别是迭代器&lt;br&gt;比如：容器空间不够时，会重新分配一块空间（搬家），原来的迭代器指向的内存可能已经废弃。&lt;/p&gt;
&lt;p&gt;operator char() const;   //这是重载的类型转换函数，当环境需要char类型时，它调用此函数。注意没有返回值，因为一定是char&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;附录：GOF的23种设计模式&quot;&gt;&lt;a href=&quot;#附录：GOF的23种设计模式&quot; class=&quot;headerlink&quot; title=&quot;附录：GOF的23种设计模式&quot;&gt;&lt;/a&gt;附录：GOF的23种设计模式&lt;/h4&gt;&lt;p&gt;_&lt;/p&gt;
&lt;h5 id=&quot;Creational-Patterns&quot;&gt;&lt;a href=&quot;#Creational-Patterns&quot; class=&quot;headerlink&quot; title=&quot;Creational Patterns&quot;&gt;&lt;/a&gt;Creational Patterns&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Abstract Factory:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Provide an interface for creating families of related or dependent objects without specifying their concrete classes.&lt;/em&gt;&lt;br&gt;提供一个创建一系列相关或相互依赖对象的接口,而无需指定它们具体的类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Builder:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Separate the construction of a complex object from its representation so that the same construction process can create different representations.&lt;/em&gt;&lt;br&gt;将一个复杂对象的构建与它的表示分离，这样使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Factory Method:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.&lt;/em&gt;&lt;br&gt;定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式使一个类的实例化延迟到子类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prototype:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.&lt;/em&gt;&lt;br&gt;用原型实例指定创建对象的种类,并且通过拷贝这个原型来创建新的对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Ensure a class only has one instance, and provide a global point of access to it.&lt;/em&gt;&lt;br&gt;保证一个类仅有一个实例,并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;h5 id=&quot;Structual-Patterns&quot;&gt;&lt;a href=&quot;#Structual-Patterns&quot; class=&quot;headerlink&quot; title=&quot;Structual Patterns&quot;&gt;&lt;/a&gt;Structual Patterns&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Adapter:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.&lt;/em&gt;&lt;br&gt;将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bridge:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Decouple an abstraction from its implementation so that the two can vary independently.&lt;/em&gt;&lt;br&gt;将抽象部分与它的实现部分分离,使它们都可以独立地变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Composite:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.&lt;/em&gt;&lt;br&gt;把物件组合成树形结构，以表示“部分－整体”的层次结构。复合模式使得用户一致地对待复合物件和单一物件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decorator:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.&lt;/em&gt;&lt;br&gt;將額外的「职责、任務、负担」以动态方式附著於物件身上,使不必進行subclassing就能扩展功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Facade:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.&lt;/em&gt;&lt;br&gt;为子系统中的一组接口提供一个一致的界面,Facade模式定义了一个高层接口,这个接口使得这一子系统更加容易使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proxy:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Provide a surrogate or placeholder for another object to control access to it.&lt;/em&gt;&lt;br&gt;为其他对象提供一个代理以控制对这个对象的访问。&lt;/p&gt;
&lt;h5 id=&quot;Behavioral-Patterns&quot;&gt;&lt;a href=&quot;#Behavioral-Patterns&quot; class=&quot;headerlink&quot; title=&quot;Behavioral Patterns&quot;&gt;&lt;/a&gt;Behavioral Patterns&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Chain of Responsibility:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.&lt;/em&gt;&lt;br&gt;为解除请求的发送者和接收者之间耦合,而使多个对象都有机会处理这个请求。将这些对象连成一条链,并沿着这条链传递该请求,直到有一个对象处理它。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.&lt;/em&gt;&lt;br&gt;将一个请求封装为一个对象,从而使你可用不同的请求对客户进行参数化;对请求排队或记录请求日志,以及支持可取消的操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpreter:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Given a language, define a represention for its grammar along with an interpreter that uses the representation to interpret sentences in the language.&lt;/em&gt;&lt;br&gt;给定一个语言,定义它的文法的一种表示,并定义一个解释器,该解释器使用该表示来解释语言中的句子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Iterator:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.&lt;/em&gt;&lt;br&gt;提供一种方法顺序访问一个聚合对象中各个元素,而又不需暴露该对象的内部表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mediator:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.&lt;/em&gt;&lt;br&gt;用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用,从而使其耦合松散,而且可以独立地改变它们之间的交互。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memeneto:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Without violating encapsulation, capture and externalize an object’s internal state so that the object can be restored to this state later.&lt;/em&gt;&lt;br&gt;在不破坏封装性的前提下,捕获一个对象的内部状态,并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observer:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.&lt;/em&gt;&lt;br&gt;定义对象间的一种一对多的依赖关系,以便当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并自动刷新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.&lt;/em&gt;&lt;br&gt;允许一个对象在其内部状态改变时改变它的行为。让这个对象看起来似乎修改了它所属的类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strategy:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.&lt;/em&gt;&lt;br&gt;定义一系列的算法,把它们一个个封装起来,并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Template Method:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.&lt;/em&gt;&lt;br&gt;定义一个操作中的算法的骨架,而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Visitor:&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.&lt;/em&gt;&lt;br&gt;表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有幸听到侯捷老师的面授，不敢懈怠。可惜只有短短8次课，只能做个入门。&lt;br&gt;课件链接：&lt;a style=&quot;text-decoration:none; color:blue;&quot; href=&quot;http://pan.baidu.com/s/1o6625ei&quot;&gt;DesignPatterns_2014.pdf&lt;/a&gt;&lt;br&gt;其中，正红色文字是我自己加的注释。&lt;/p&gt;
    
    </summary>
    
      <category term="基础理论" scheme="http://Rocklu.me/categories/%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/"/>
    
    
  </entry>
  
</feed>
